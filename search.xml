<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络【JavaGuide+牛客网】</title>
      <link href="/2020/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%90JavaGuide-%E7%89%9B%E5%AE%A2%E7%BD%91%E3%80%91/"/>
      <url>/2020/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%90JavaGuide-%E7%89%9B%E5%AE%A2%E7%BD%91%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络【JavaGuide-牛客网】"><a href="#计算机网络【JavaGuide-牛客网】" class="headerlink" title="计算机网络【JavaGuide+牛客网】"></a>计算机网络【JavaGuide+牛客网】</h1><h2 id="一、层次结构与协议"><a href="#一、层次结构与协议" class="headerlink" title="一、层次结构与协议"></a>一、层次结构与协议</h2><h3 id="1-1-OSI与TCP-IP各层的结构与功能-都有哪些协议"><a href="#1-1-OSI与TCP-IP各层的结构与功能-都有哪些协议" class="headerlink" title="1.1 OSI与TCP/IP各层的结构与功能,都有哪些协议?"></a>1.1 OSI与TCP/IP各层的结构与功能,都有哪些协议?</h3><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><ul><li><p>应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS，支持万维网应用的 HTTP协议，支持电子邮件的 SMTP协议等等。我们把应用层交互的数据单元称为报文。</p><a id="more"></a></li><li><p>域名系统</p><ul><li>域名系统(Domain Name System缩写 DNS，Domain Name被译为域名)是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。（百度百科）例如：一个公司的 Web 网站可看作是它在网上的门户，而域名就相当于其门牌地址，通常域名都使用该公司的名称或简称。例如上面提到的微软公司的域名，类似的还有：IBM 公司的域名是 <a href="http://www.ibm.com、Oracle" target="_blank" rel="noopener">www.ibm.com、Oracle</a> 公司的域名是 <a href="http://www.oracle.com、Cisco公司的域名是" target="_blank" rel="noopener">www.oracle.com、Cisco公司的域名是</a> <a href="http://www.cisco.com" target="_blank" rel="noopener">www.cisco.com</a> 等。</li></ul></li><li><p>HTTP协议</p><ul><li>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。（百度百科）</li></ul></li></ul><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><ul><li><p>运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p></li><li><p>运输层主要使用以下两种协议:</p><ul><li>1、传输控制协议 TCP（Transmission Control Protocol）–提供面向连接的，可靠的数据传输服务。</li><li>2、用户数据协议 UDP（User Datagram Protocol）–提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。</li></ul></li></ul><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><ul><li>在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称 数据报。</li><li>这里要注意：不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。</li><li>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称.</li><li>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Protocol）和许多路由选择协议，因此互联网的网络层也叫做网际层或IP层。</li></ul><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><ul><li><p>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。 在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p></li><li><p>控制信息</p><ul><li>1)在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。</li><li>2)控制信息还使接收端能够检测到所收到的帧中有误差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</li></ul></li></ul><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><ul><li>在物理层上所传送的数据单位是比特。 物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</li></ul><h3 id="1、七层体系结构图"><a href="#1、七层体系结构图" class="headerlink" title="1、七层体系结构图"></a>1、七层体系结构图</h3><ul><li><p>TCP协议、IP协议、HTTP协议分别在哪一层吗？</p><ul><li>运输层，网络层，应用层。</li></ul></li></ul><h3 id="2、网络七层协议的通俗理解"><a href="#2、网络七层协议的通俗理解" class="headerlink" title="2、网络七层协议的通俗理解"></a>2、网络七层协议的通俗理解</h3><h3 id="3、各种协议与HTTP协议之间的关系"><a href="#3、各种协议与HTTP协议之间的关系" class="headerlink" title="3、各种协议与HTTP协议之间的关系"></a>3、各种协议与HTTP协议之间的关系</h3><h3 id="4、OSI七层协议模型、TCP-IP四层模型和五层协议体系结构之间的关系"><a href="#4、OSI七层协议模型、TCP-IP四层模型和五层协议体系结构之间的关系" class="headerlink" title="4、OSI七层协议模型、TCP/IP四层模型和五层协议体系结构之间的关系"></a>4、OSI七层协议模型、TCP/IP四层模型和五层协议体系结构之间的关系</h3><h2 id="二、协议"><a href="#二、协议" class="headerlink" title="二、协议"></a>二、协议</h2><h3 id="2-1-TCP-三次握手和四次挥手-面试常客"><a href="#2-1-TCP-三次握手和四次挥手-面试常客" class="headerlink" title="2.1 TCP 三次握手和四次挥手(面试常客)"></a>2.1 TCP 三次握手和四次挥手(面试常客)</h3><ul><li><p>1）TCP 三次握手</p><ul><li><p>TCP运输连接有三个阶段：连接建立、数据传送、连接释放<br>TCP连接过程通常叫做握手，握手需要客户端和服务器端交换三个报文</p><ul><li>客户端–发送带有 SYN 标志的数据包–一次握手–服务端</li><li>服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端</li><li>客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</li></ul></li><li><p>1、为什么要三次握手</p><ul><li>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</li><li>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</li><li>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</li><li>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</li><li>所以三次握手就能确认双发收发功能都正常，缺一不可。</li></ul></li><li><p>2、为什么要传回 SYN</p><ul><li>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。</li><li>SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。</li></ul></li><li><p>3、传了 SYN,为啥还要传 ACK</p><ul><li>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。</li></ul></li></ul></li><li><p>2）四次挥手</p><ul><li><p>断开一个 TCP 连接则需要“四次挥手”：</p><ul><li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li><li>服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</li><li>服务器-关闭与客户端的连接，发送一个FIN给客户端</li><li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</li></ul></li><li><p>1、为什么要四次挥手</p><ul><li><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><ul><li>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。</li></ul></li><li><p>TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。</p></li></ul></li></ul></li></ul><h3 id="2-2-TCP-UDP-协议的区别"><a href="#2-2-TCP-UDP-协议的区别" class="headerlink" title="2.2  TCP,UDP 协议的区别"></a>2.2  TCP,UDP 协议的区别</h3><ul><li></li><li>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等</li><li>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务（TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。</li></ul><h3 id="2-3-TCP协议"><a href="#2-3-TCP协议" class="headerlink" title="2.3 TCP协议"></a>2.3 TCP协议</h3><ul><li><p>1、 TCP 协议如何保证可靠传输</p><ul><li>1）应用数据被分割成 TCP 认为最适合发送的数据块。</li><li>2）TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li>3）校验和： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li>4）TCP 的接收端会丢弃重复的数据。</li><li>5）流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li><li>6）拥塞控制： 当网络拥塞时，减少数据的发送。</li><li>7）ARQ协议： 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li><li>8）超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li></ul></li><li><p>2、TCP为什么可靠一些</p><ul><li>三次握手，超时重传，滑动窗口，拥塞控制。</li></ul></li><li><p>3、tcp为什么要建立连接？</p><ul><li>保证可靠传输。</li></ul></li><li><p>4、请说明一下哪种应用场景会使用TCP协议，使用它的意义</p><ul><li>当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议</li></ul></li><li><p>TCP的连接和释放过程</p><ul><li>三次握手的过程</li><li>四次挥手过程</li></ul></li></ul><h3 id="2-4-ARQ协议"><a href="#2-4-ARQ协议" class="headerlink" title="2.4 ARQ协议"></a>2.4 ARQ协议</h3><ul><li><p>自动重传请求（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。ARQ包括停止等待ARQ协议和连续ARQ协议。</p></li><li><p>1、停止等待ARQ协议</p><ul><li><p>1）停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组；</p></li><li><p>2）在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认</p></li><li><p>优缺点</p><ul><li>优点： 简单</li><li>缺点： 信道利用率低，等待时间长</li></ul></li><li><p>不同情况</p><ul><li><p>1) 无差错情况:</p><ul><li>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</li></ul></li><li><p>2) 出现差错情况（超时重传）:</p><ul><li>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 自动重传请求 ARQ 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</li></ul></li><li><p>3) 确认丢失和确认迟到</p><ul><li>确认丢失 ：确认消息在传输过程丢失。当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：1. 丢弃这个重复的M1消息，不向上层交付。 2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li><li>确认迟到 ：确认消息在传输过程中迟到。A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：1. A收到重复的确认后，直接丢弃。2. B收到重复的M1后，也直接丢弃重复的M1。</li></ul></li></ul></li></ul></li><li><p>2、连续ARQ协议</p><ul><li><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p></li><li><p>优缺点</p><ul><li>优点： 信道利用率高，容易实现，即使确认丢失，也不必重传。</li><li>缺点： 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</li></ul></li></ul></li></ul><h3 id="2-5-HTTP协议"><a href="#2-5-HTTP协议" class="headerlink" title="2.5 HTTP协议"></a>2.5 HTTP协议</h3><ul><li><p>HTTP长连接,短连接</p><ul><li><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p></li><li><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><ul><li>Connection:keep-alive</li></ul></li><li><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p></li><li><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p></li></ul></li><li><p>3.1.11 HTTP是不保存状态的协议,如何保存用户状态?</p><ul><li><p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说 HTTP 协议自身不对请求和响应之间的通信状态进行保存。</p></li><li><p>1）那么我们保存用户状态呢？Session 机制的存在就是为了解决这个问题，Session 的主要作用就是通过服务端记录用户的状态。典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个Session）。</p><ul><li>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库redis保存)。</li></ul></li><li><p>2）既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下，我们都是通过在 Cookie 中附加一个 Session ID 来方式来跟踪。</p></li><li><p>3）Cookie 被禁用怎么办?</p><ul><li>最常用的就是利用 URL 重写把 Session ID 直接附加在URL路径的后面。</li></ul></li></ul></li><li><p>3.1.13 HTTP 1.0和HTTP 1.1的主要区别是什么?</p><ul><li>HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别主要体现在：</li><li>1）长连接 : 在HTTP/1.0中，默认使用的是短连接，也就是说每次请求都要重新建立一次连接。HTTP 是基于TCP/IP协议的,每一次建立或者断开连接都需要三次握手四次挥手的开销，如果每次请求都要这样的话，开销会比较大。因此最好能维持一个长连接，可以用个长连接来发多个请求。HTTP 1.1起，默认使用长连接 ,默认开启Connection： keep-alive。 HTTP/1.1的持续连接有非流水线方式和流水线方式 。流水线方式是客户在收到HTTP的响应报文之前就能接着发送新的请求报文。与之相对应的非流水线方式是客户在收到前一个响应后才能发送下一个请求。</li><li>2）错误状态响应码 :在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li>3）缓存处理 :在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li>4）带宽优化及网络连接的使用 :HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li></ul></li><li><p>3.1.13 HTTP 和 HTTPS 的区别？</p><ul><li><p>1、端口 ：HTTP的URL由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</p></li><li><p>2、安全性和资源消耗： HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源。</p><ul><li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul></li></ul></li><li><p>SSL四次握手</p><ul><li>SSL类似于TCP的三次握手，在HTTP链接建立之前进行四次握手，从而客户度和服务端沟通好HTTP传输时对称加密的密钥，大致过程如下图：</li><li>1、客户端请求建立SSL链接，并向服务端发送一个随机数–Client random和客户端支持的加密方法，比如RSA公钥加密，此时是明文传输。</li><li>2、服务端回复一种客户端支持的加密方法、一个随机数–Server random、授信的服务器证书和非对称加密的公钥。</li><li>3、客户端收到服务端的回复后利用服务端的公钥，加上新的随机数–Premaster secret 通过服务端下发的公钥及加密方法进行加密，发送给服务器。</li><li>4、服务端收到客户端的回复，利用已知的加解密方式进行解密，同时利用Client random、Server random和Premaster secret通过一定的算法生成HTTP链接数据传输的对称加密key – session key。</li><li>此后的HTTP链接数据传输即通过对称加密方式进行加密传输。</li></ul></li><li><p>1、请谈一下，你知道的http请求，并说明应答码502和504的区别</p><ul><li><p>1）HTTP请求</p><ul><li>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</li><li>HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</li><li>GET：向特定的资源发出请求。</li><li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li><li>PUT：向指定资源位置上传其最新内容。</li><li>DELETE：请求服务器删除Request-URI所标识的资源。</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li><li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li><li>虽然HTTP的请求方式有8种，但是我们在实际应用中常用的也就是get和post，其他请求方式也都可以通过这两种方式间接的来实现。</li></ul></li><li><p>2）应答码502和504</p><ul><li>502：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</li><li>504：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</li></ul></li></ul></li></ul><h3 id="2-6-ARP协议【地址解析协议】"><a href="#2-6-ARP协议【地址解析协议】" class="headerlink" title="2.6 ARP协议【地址解析协议】"></a>2.6 ARP协议【地址解析协议】</h3><ul><li>请简单解释一下，arp协议和arp攻击。</li><li>ARP攻击的第一步就是ARP欺骗。由上述“ARP协议的工作过程”我们知道，ARP协议基本没有对网络的安全性做任何思考，当时人们考虑的重点是如何保证网络通信能够正确和快速的完成——ARP协议工作的前提是默认了其所在的网络是一个善良的网络，每台主机在向网络中发送应答信号时都是使用的真实身份。不过后来，人们发现ARP应答中的IP地址和MAC地址中的信息是可以伪造的，并不一定是自己的真实IP地址和MAC地址，由此，ARP欺骗就产生了。</li></ul><h3 id="2-7-ICMP协议"><a href="#2-7-ICMP协议" class="headerlink" title="2.7 ICMP协议"></a>2.7 ICMP协议</h3><ul><li>它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</li></ul><h2 id="三、控制"><a href="#三、控制" class="headerlink" title="三、控制"></a>三、控制</h2><h3 id="3-1-滑动窗口和流量控制"><a href="#3-1-滑动窗口和流量控制" class="headerlink" title="3.1 滑动窗口和流量控制"></a>3.1 滑动窗口和流量控制</h3><ul><li>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li></ul><h3 id="3-2-拥塞控制"><a href="#3-2-拥塞控制" class="headerlink" title="3.2 拥塞控制"></a>3.2 拥塞控制</h3><ul><li><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p></li><li><p>为了进行拥塞控制，TCP 发送方要维持一个 拥塞窗口(cwnd) 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p></li><li><p>TCP的拥塞控制采用了四种算法，即 慢开始 、 拥塞避免 、快重传 和 快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p><ul><li>1）慢开始： 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li><li>2）拥塞避免： 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.</li><li>3）快重传与快恢复： 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li></ul></li></ul><h2 id="四、请求响应与状态"><a href="#四、请求响应与状态" class="headerlink" title="四、请求响应与状态"></a>四、请求响应与状态</h2><h3 id="4-1-在浏览器中输入url地址-gt-gt-显示主页的过程-面试常客"><a href="#4-1-在浏览器中输入url地址-gt-gt-显示主页的过程-面试常客" class="headerlink" title="4.1 在浏览器中输入url地址 -&gt;&gt; 显示主页的过程(面试常客)"></a>4.1 在浏览器中输入url地址 -&gt;&gt; 显示主页的过程(面试常客)</h3><ul><li>总体来说分为以下几个过程:</li><li>1.DNS解析</li><li>2.TCP连接</li><li>3.发送HTTP请求</li><li>4.服务器处理请求并返回HTTP报文</li><li>5.浏览器解析渲染页面</li><li>6.连接结束</li></ul><h3 id="4-2-状态码"><a href="#4-2-状态码" class="headerlink" title="4.2 状态码"></a>4.2 状态码</h3><h3 id="4-3-http请求中的304状态码的含义"><a href="#4-3-http请求中的304状态码的含义" class="headerlink" title="4.3 http请求中的304状态码的含义"></a>4.3 http请求中的304状态码的含义</h3><ul><li>304(未修改)自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应(称为 If-Modified-Since HTTP 标头)。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</li></ul><h3 id="4-4-Cookie的作用是什么-和Session有什么区别？"><a href="#4-4-Cookie的作用是什么-和Session有什么区别？" class="headerlink" title="4.4 Cookie的作用是什么?和Session有什么区别？"></a>4.4 Cookie的作用是什么?和Session有什么区别？</h3><ul><li><p>1、Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p><ul><li><p>1）Cookie 一般用来保存用户信息 比如</p><ul><li>①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；</li><li>②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；</li><li>③登录一次网站后访问网站其他页面不需要重新登录。</li></ul></li><li><p>2）Session 的主要作用就是通过服务端记录用户的状态。</p><ul><li>典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</li></ul></li></ul></li><li><p>2、Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p><ul><li>Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</li></ul></li><li><p>会话跟踪</p><ul><li><p>会话跟踪是一种灵活、轻便的机制，它使Web上的状态编程变为可能。</p></li><li><p>HTTP是一种无状态协议，每当用户发出请求时，服务器就会做出响应，客户端与服务器之间的联系是离散的、非连续的。当用户在同一网站的多个页面之间转换时，根本无法确定是否是同一个客户，会话跟踪技术就可以解决这个问题。当一个客户在多个页面间切换时，服务器会保存该用户的信息。</p></li><li><p>有四种方法可以实现会话跟踪技术：URL重写、隐藏表单域、Cookie、Session。</p><ul><li>1）隐藏表单域：<input type="hidden">，非常适合步需要大量数据存储的会话应用。</li><li>2）URL 重写 : URL可以在后面附加参数，和服务器的请求一起发送，这些参数为名字/值对。</li><li>3） Cookie : 一个 Cookie是一个小的，已命名数据元素。服务器使用 SET-Cookie 头标将它作为 HTTP响应的一部分传送到客户端，客户端被请求保存Cookie 值，在对同一服务器的后续请求使用一个Cookie 头标将之返回到服务器。与其它技术比较，Cookie的一个优点是在浏览器会话结束后，甚至在客户端计算机重启后它仍可以保留其值</li><li>4）Session：使用setAttribute(String str,Object obj)方法将对象捆绑到一个会话</li></ul></li></ul></li></ul><h3 id="4-5-URI和URL的区别是什么"><a href="#4-5-URI和URL的区别是什么" class="headerlink" title="4.5 URI和URL的区别是什么?"></a>4.5 URI和URL的区别是什么?</h3><ul><li><p>区别</p><ul><li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li><li>URL(Uniform Resource Location) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul></li><li><p>URI的作用像身份证号一样，URL的作用更像家庭住址一样。URL是一种具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p></li></ul><h3 id="4-6-路由器和交换机的区别？"><a href="#4-6-路由器和交换机的区别？" class="headerlink" title="4.6 路由器和交换机的区别？"></a>4.6 路由器和交换机的区别？</h3><ul><li><p>1、工作层次不同：交换机比路由器更简单，路由器比交换器能获取更多信息</p><ul><li>交换机工作在数据链路层，而路由器工作在网络层</li></ul></li><li><p>2、数据转发所依据的对象不同</p><ul><li>交换机的数据转发依据是利用物理地址或者说MAC地址来确定转发数据的目的地址</li><li>而路由器是依据ip地址进行工作的</li></ul></li><li><p>3、传统的交换机只能分割冲突域，不能分割广播域;而路由器可以分割广播域</p></li></ul><h3 id="4-7-DNS的寻址过程"><a href="#4-7-DNS的寻址过程" class="headerlink" title="4.7 DNS的寻址过程"></a>4.7 DNS的寻址过程</h3><ul><li><p>1、在浏览器中输入<a href="http://www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。" target="_blank" rel="noopener">www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a></p></li><li><p>2、如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</p></li><li><p>3、如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/ip参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</p></li><li><p>4、如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</p></li><li><p>5、如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询</p><ul><li>1）如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qq.com主机。" target="_blank" rel="noopener">www.qq.com主机。</a></li><li>2）如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li></ul></li><li><p>从客户端到本地DNS服务器是属于递归查询，而DNS服务器之间就是的交互查询就是迭代查询。</p></li></ul><h3 id="4-8-负载均衡-反向代理模式的优点、缺点"><a href="#4-8-负载均衡-反向代理模式的优点、缺点" class="headerlink" title="4.8 负载均衡 反向代理模式的优点、缺点"></a>4.8 负载均衡 反向代理模式的优点、缺点</h3><ul><li><p>（1）反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p></li><li><p>（2）反向代理负载均衡技术是把将来自internet上的连接请求以反向代理的方式动态地转发给内部网络上的多台服务器进行处理，从而达到负载均衡的目的。</p></li><li><p>（3）反向代理负载均衡能以软件方式来实现，如apache mod_proxy、netscape proxy等，也可以在高速缓存器、负载均衡器等硬件设备上实现。反向代理负载均衡可以将优化的负载均衡策略和代理服务器的高速缓存技术结合在一起，提升静态网页的访问速度，提供有益的性能；由于网络外部用户不能直接访问真实的服务器，具备额外的安全性（同理，NAT负载均衡技术也有此优点）。</p></li><li><p>（4）其缺点主要表现在以下两个方面</p><ul><li>反向代理是处于OSI参考模型第七层应用的，所以就必须为每一种应用服务专门开发一个反向代理服务器，这样就限制了反向代理负载均衡技术的应用范围，现在一般都用于对web服务器的负载均衡。</li><li>针对每一次代理，代理服务器就必须打开两个连接，一个对外，一个对内，因此在并发连接请求数量非常大的时候，代理服务器的负载也就非常大了，在最后代理服务器本身会成为服务的瓶颈。</li></ul></li><li><p>一般来讲，可以用它来对连接数量不是特别大，但每次连接都需要消耗大量处理资源的站点进行负载均衡，如search等。</p></li></ul><h3 id="4-9一些方法"><a href="#4-9一些方法" class="headerlink" title="4.9一些方法"></a>4.9一些方法</h3><ul><li><p>1）创建Socket 客户端对象</p><ul><li>Socket s = new Socket(“127.0.0.1”,6666);</li></ul></li><li><p>2）创建ServerSocket 服务器端对象</p><ul><li><p>ServerSocket ss = new ServerSocket(6666);</p><ul><li>服务器端通过new ServerSocket()创建TCP连接对象  accept接纳客户端请求</li></ul></li><li><p>Socket s=ss.accept();</p><ul><li>//当有客户端连接时才创建Socket对象，而不是new ServerSocket时创建</li><li>创建是在accept()中实现的</li></ul></li></ul></li><li><p>3）监听服务器连接</p><ul><li>s = ss.accept();</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 5.2.5官方文档 阅读笔记</title>
      <link href="/2020/07/22/Spring%20MVC5.2.5%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/22/Spring%20MVC5.2.5%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC-5-2-5官方文档-阅读笔记"><a href="#Spring-MVC-5-2-5官方文档-阅读笔记" class="headerlink" title="Spring MVC 5.2.5官方文档 阅读笔记"></a>Spring MVC 5.2.5官方文档 阅读笔记</h1><blockquote><p>官方文档<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-controller" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-controller</a></p></blockquote><h2 id="控制器-Controller-的实现"><a href="#控制器-Controller-的实现" class="headerlink" title="控制器(Controller)的实现"></a>控制器(Controller)的实现</h2><blockquote><p>控制器是应用程序逻辑的处理入口，主要负责去调用service层已经实现的服务。</p><p>工作流程：控制器接收到用户请求并进行解析，然后将其转化为一个模型model交给视图，由视图解析器渲染成页面返回给用户。</p></blockquote><h3 id="1-1-DispatcherServlet"><a href="#1-1-DispatcherServlet" class="headerlink" title="1.1. DispatcherServlet"></a>1.1. DispatcherServlet</h3><a id="more"></a><h4 id="1-1-5-Processing"><a href="#1-1-5-Processing" class="headerlink" title="1.1.5. Processing"></a>1.1.5. Processing</h4><p><strong>1.DispatcherServlet按如下方式处理请求：</strong></p><ol><li>在请求中搜索WebApplicationContext并进行绑定，将其作为控制器和进程中其他元素可以使用的属性。默认情况下，它绑定在 DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE 键下。</li><li>将区域设置解析器绑定到请求，以便其他组件在处理请求（渲染视图、准备数据等）时可以获取区域相关的信息。如果不需要区域设置解析，则不需要区域设置解析程序。</li><li>主题解析器绑定到请求，以便让视图等元素确定要使用哪个主题。如果不使用主题，可以忽略它。</li><li>如果配置了multipart文件解析器，则会检查请求中该文件是不是multipart（分为多个部分连续上传）的。如果找到multiparts，则将该请求包装成一个<code>MultipartHttpServletRequest</code>对象，以便处理链中的其他组件对它做进一步的处理。有关multipart处理的详细信息，请参阅multipart解析器。</li><li>为该请求查找一个合适的处理器。如果可以找到对应的处理器，则与该处理器关联的整条执行链（前处理器、后处理器、控制器等）都会被执行，以完成相应模型的准备或视图的渲染。或者，对于带注释的控制器，可以呈现响应（在HandlerAdapter中），而不是返回视图。</li><li>如果处理器返回的是一个模型（model），那么框架将渲染相应的视图。若没有返回任何模型（可能是因为前后的处理器出于某些原因拦截了请求等，比如，安全问题），则框架不会渲染任何视图，此时认为对请求的处理可能已经由处理链完成了。</li></ol><h5 id="Container-Error-Page"><a href="#Container-Error-Page" class="headerlink" title="Container Error Page"></a>Container Error Page</h5><blockquote><p>如果任何HandlerExceptionResolver仍然无法解决异常，因此，该异常将被保留以传播，或者如果响应状态设置为错误状态（即4xx、5xx），则Servlet容器可以在HTML中呈现默认的错误页。要自定义容器的默认错误页，可以在web.xml中声明错误页映射。下面的示例演示了如何执行此操作：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在前面的示例中，当出现异常或响应具有错误状态时，Servlet容器在容器内对配置的URL进行错误分派（例如/error）。然后由DispatcherServlet进行处理，可能将其映射到@Controller，后者可以实现为返回带有模型的错误视图名称或呈现JSON响应，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</span><br><span class="line">        map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Session-Resolver"><a href="#Session-Resolver" class="headerlink" title="Session Resolver"></a>Session Resolver</h5><blockquote><p>sessionLocalerResolver允许您从可能与用户请求关联的会话中检索区域设置和时区。与CookielocalResolver不同，此策略将本地选择的区域设置存储在Servlet容器的HttpSession中。因此，这些设置是每个会话的临时设置，因此在每个会话终止时丢失。</p><p>请注意，与外部会话管理机制（如Spring会话项目）没有直接关系。此sessionLocalerResolver根据当前HttpServletRequest计算并修改相应的HttpSession属性。</p></blockquote><h4 id="1-1-11-Multipart-Resolver"><a href="#1-1-11-Multipart-Resolver" class="headerlink" title="1.1.11. Multipart Resolver"></a>1.1.11. Multipart Resolver</h4><blockquote><p>来自org.springframework.web.multipart包的MultipartResolver是一种分析包括文件上传在内的多部分请求的策略。其中有一种实现基于Commons FileUpload，另一种实现基于Servlet 3.0多部分请求解析。</p><ol><li>要启用多部分处理，需要在DispatcherServlet Spring配置中使用MultipartResolver的一个名称声明MultipartResolver bean最佳。DispatcherServlet将检测到它并将其应用于传入的请求。</li><li>当接收到内容类型为multipart/form数据的POST时，<strong>解析器解析内容并将当前HttpServletRequest包装为multiparttpservletrequest，以提供对已解析部分的访问</strong>，并将其作为请求参数公开。</li></ol></blockquote><h5 id="Apache-Commons-FileUpload"><a href="#Apache-Commons-FileUpload" class="headerlink" title="Apache Commons FileUpload"></a>Apache Commons <code>FileUpload</code></h5><p>To use Apache Commons <code>FileUpload</code>, you can configure a bean of type <code>CommonsMultipartResolver</code> with a name of <code>multipartResolver</code>. You also need to have <code>commons-fileupload</code> as a dependency on your classpath.</p><h5 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h5><p>Servlet 3.0 multipart parsing needs to be enabled through Servlet container configuration. To do so:</p><ul><li>In Java, set a <code>MultipartConfigElement</code> on the Servlet registration.</li><li>In <code>web.xml</code>, add a <code>&quot;&quot;</code> section to the servlet declaration.</li></ul><p>The following example shows how to set a <code>MultipartConfigElement</code> on the Servlet registration:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold</span></span><br><span class="line">        registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once the Servlet 3.0 configuration is in place, you can add a bean of type <code>StandardServletMultipartResolver</code> with a name of <code>multipartResolver</code>.</p><h3 id="1-2-Filters"><a href="#1-2-Filters" class="headerlink" title="1.2. Filters"></a>1.2. Filters</h3><h3 id="1-3-Annotated-Controllers-Controller-RestController"><a href="#1-3-Annotated-Controllers-Controller-RestController" class="headerlink" title="1.3. Annotated Controllers: @Controller @RestController"></a>1.3. Annotated Controllers: @Controller @RestController</h3><h4 id="1-3-1-Declaration"><a href="#1-3-1-Declaration" class="headerlink" title="1.3.1. Declaration"></a>1.3.1. Declaration</h4><blockquote><p>Spring MVC提供了一个基于注释的编程模型，其中@Controller和@RestController组件使用注释来表示请求映射、请求输入、异常处理等。带注释的控制器具有灵活的方法识别标志，无需扩展基类或实现特定接口。</p><p>分派器（<code>DispatcherServlet</code>）会自动扫描所有注解了<code>@Controller</code>的类，检测其中通过<code>@RequestMapping</code>注解配置的方法。</p></blockquote><h6 id="1、自定义控制器的bean组件："><a href="#1、自定义控制器的bean组件：" class="headerlink" title="1、自定义控制器的bean组件："></a>1、自定义控制器的bean组件：</h6><blockquote><p>遵循WebApplicationContext的组件标准，而且spring支持自动检测在类路径下的@Component类与自动注册bean组件。</p></blockquote><ul><li>配置类：为了能够自动检测到控制器的bean组件，需要使用@ComponentScan：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"org.example.web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span></span></span><br></pre></td></tr></table></figure><ul><li><p>xml文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example.web"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="2、-RestController"><a href="#2、-RestController" class="headerlink" title="2、@RestController"></a>2、@RestController</h6><blockquote><p>是@Controller和@Responsebody的结合体，一方面表明这是一个控制器，另一方面其方法继承了@Responsebody，因此该类中方法直接写入响应体，而不是通过视图解析和HTML模板呈现</p></blockquote><h6 id="3、面向切面（AOP）代理"><a href="#3、面向切面（AOP）代理" class="headerlink" title="3、面向切面（AOP）代理"></a>3、面向切面（AOP）代理</h6><p>@Controller控制器默认选择AOP代理，可使用@Transactional管理事务，但是在控制器需要实现特定接口【而该接口又不支持Spring Context的回调（比如<code>InitializingBean</code>, <code>*Aware</code>等接口）】的时候，则需要自行配置代理。</p><p>For example with  </p><p><code>&lt;tx:annotation-driven/&gt;,</code>change to <code>&lt;tx:annotation-driven proxy-target-class=&quot;true&quot;/&gt;</code></p><h4 id="1-3-2-Request-Mapping"><a href="#1-3-2-Request-Mapping" class="headerlink" title="1.3.2. Request Mapping"></a>1.3.2. Request Mapping</h4><blockquote><p><code>@RequestMapping</code>注解默认会映射所有的HTTP请求方法。如果仅想接收某种请求方法，请在注解中指定之<code>@RequestMapping(method=GET)</code>以缩小范围。</p><p>把控制器中的一系列处理方法当成是一系列独立的服务节点，每个从类级别和方法级别的<code>@RequestMapping</code>注解中获取到足够请求路径映射信息。【RequestMappingHandlerMapping】</p></blockquote><p>There are also HTTP method specific shortcut variants of <code>@RequestMapping</code>:</p><ul><li><code>@GetMapping</code>  该方法接受一个模型model并以字符串Sring形式返回一个视图名</li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code></li></ul><p>在类级别使用@RequestMapping来表示共享映射, 再在控制器方法上使用可区别的映射方式。即classes level +method level的映射组成了一个<strong>特定的http请求路径</strong>。</p><blockquote><ul><li>一般来说，类级别的注解负责将一个特定（或符合某种模式）的请求路径映射到一个控制器上，同时通过方法级别的注解来细化映射，即根据特定的HTTP请求方法（“GET”“POST”方法等）、HTTP请求中是否携带特定参数等条件，将请求映射到匹配的方法上。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/persons"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.CREATED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(@RequestBody Person person)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="URI-patterns：URI模板"><a href="#URI-patterns：URI模板" class="headerlink" title="URI patterns：URI模板"></a>URI patterns：URI模板</h5><blockquote><p>URI模板是一个类似于URI的字符串，只不过其中包含了一个或多个的变量名。当你使用实际的值去填充这些变量名的时候，模板就退化成了一个URI。即URI进行了参数化。</p></blockquote><p>您可以使用glob模式和通配符映射请求：</p><ul><li>?  匹配一个字符</li><li>*匹配路径段中的零个或多个字符</li><li>**匹配零个或多个路径段</li></ul><h5 id="1、-PathVariable：可以声明URI变量并使用-PathVariable访问它们的值："><a href="#1、-PathVariable：可以声明URI变量并使用-PathVariable访问它们的值：" class="headerlink" title="1、@PathVariable：可以声明URI变量并使用@PathVariable访问它们的值："></a><strong>1、@PathVariable</strong>：可以声明URI变量并使用<strong>@PathVariable</strong>访问它们的值：</h5><blockquote><ol><li><p>在Spring MVC中你可以在方法参数上使用<code>@PathVariable</code>注解，将其与URI模板中的参数绑定起来：</p></li><li><p>URI变量将自动转换为适当的类型，或者引发“TypeMismatchException”。默认情况下支持简单类型 - int、long、Date，您可以注册对任何其他数据类型的支持。请参见类型转换和绑定方法。</p></li></ol><ol start="3"><li><p>Spring MVC可通过显式命名@PathVariables中变量名来找到URI模板中相对应的变量。 </p><p>URI变量可以显式地命名为 - ，例如@PathVariable（“customId”）</p><ul><li><p>如果URI模板中的变量名与方法的参数名是相同的，则你可以不必再指定一次。</p></li><li><p>一个方法可以拥有任意数量的<code>@PathVariable</code>注解</p></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnerController</span> </span>&#123;</span><br><span class="line">  <span class="comment">//如果URI模板中的变量名与方法的参数名是相同的，则可以不必再指定一次。</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/pets/&#123;petId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">findPet</span><span class="params">(@PathVariable Long ownerId, @PathVariable Long petId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/owners/&#123;ownerId&#125;&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findOwner</span><span class="params">(@PathVariable(<span class="string">"ownerId"</span>)</span> String theOwner, Model model) </span>&#123;</span><br><span class="line">    <span class="comment">// 具体的方法代码…</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、可以使用正则表达式声明uri变量："><a href="#2、可以使用正则表达式声明uri变量：" class="headerlink" title="2、可以使用正则表达式声明uri变量："></a>2、可以使用正则表达式声明uri变量：</h5><blockquote><p>语法：<code>{varName:regex}</code>  第一部分定义了变量名，第二部分就是你所要应用的正则表达式</p><p>Spring MVC使用PathMatcher契约和来自Spring core的AntPathMatcher实现进行URI路径匹配。</p><p>下面的方法提取名称、版本和文件扩展名：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;ext:\\.[a-z]+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@PathVariable String version, @PathVariable String ext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、Pattern-comparison：模式比较-路径匹配"><a href="#3、Pattern-comparison：模式比较-路径匹配" class="headerlink" title="3、Pattern comparison：模式比较/路径匹配"></a>3、Pattern comparison：模式比较/路径匹配</h5><p>最佳匹配：This done via <code>AntPathMatcher.getPatternComparator(String path)</code> which looks for patterns that more specific.</p><p><strong>匹配顺序</strong>：</p><ul><li><p>即越具体 匹配分数越高，URI模板变量的数目和通配符数量的总和最少的那个路径模板更准确。</p></li><li><p>匹配得分：URI变量&gt;单个通配符&gt;多个通配符&gt;前缀模式&gt;/**</p><p>默认的映射模式 /** 不包括在评分中，并且总是最后排序。此外，前缀模式（如 /public/** ）被认为比其他任何不包括双通配符的模式更不具体。</p></li></ul><blockquote><p>更多的细节请参考这两个类：<code>AntPatternComparator</code>和<code>AntPathMatcher</code>。值得一提的是，PathMatcher类是可以配置的。</p></blockquote><h5 id="4-Suffix-Match-后缀匹配"><a href="#4-Suffix-Match-后缀匹配" class="headerlink" title="4. Suffix Match/后缀匹配"></a>4. Suffix Match/后缀匹配</h5><blockquote><ol><li><p>默认情况下，Spring MVC采用<code>&quot;.*&quot;</code>的后缀模式匹配来进行路径匹配，即所有在/person路径下的的控制器会被隐式映射到/person.*。</p></li><li><p>可利用不同的文件扩展名解析对应的请求内容类型（即，代替接收头）  ，以响应请求。</p><p>例如/person.pdf、/person.xml和其他。</p><p>当使用URI变量、路径参数和URI编码覆盖时，文件扩展名可能会导致歧义。目前首选是使用接收头，而当浏览器用来发送难以一致解释的接受头时，则可使用文件扩展名来区分解析。</p></li></ol></blockquote><p>要完全<strong>禁用文件扩展名</strong>的使用，必须同时设置以下两项：</p><ul><li><code>useSuffixPatternMatching(false)</code>, see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-path-matching" target="_blank" rel="noopener">PathMatchConfigurer</a></li><li><code>favorPathExtension(false)</code>, see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-content-negotiation" target="_blank" rel="noopener">ContentNegotiationConfigurer</a></li></ul><blockquote><p>建议使用基于查询参数的策略，以避免文件扩展名带来的大多数问题。或者，如果必须使用文件扩展名，请考虑通过ContentNegotiationConfigurer的mediaTypes属性将它们限制为显式注册的扩展名列表。</p></blockquote><blockquote><p>从5.2.4开始，在<strong><em>RequestMappingHandlerMapping中的请求映射和在ContentNegotiationManagerFactoryBean中的内容协商的路径扩展相关选项</em></strong>将被弃用。更多计划见Spring框架问题#24179及相关问题。</p></blockquote><h5 id="5-Suffix-Match-and-RFD-后缀模式匹配与RFD"><a href="#5-Suffix-Match-and-RFD-后缀模式匹配与RFD" class="headerlink" title="5.Suffix Match and RFD/后缀模式匹配与RFD"></a>5.Suffix Match and RFD/后缀模式匹配与RFD</h5><blockquote><p>反射文件下载（reflected file download，RFD）攻击与XSS类似，它依赖于响应中反射的请求输入（例如，查询参数和URI变量）。然而，RFD攻击不是将JavaScript插入HTML，而是依赖于浏览器页面切换来执行下载，并在以后双击时将响应视为可执行脚本。</p><p>在Spring MVC中，@ResponseBody和ResponseEntity方法面临风险，因为它们会根据客户的请求——包括URL的路径后缀，来渲染不同的内容类型。禁用后缀模式匹配和使用路径扩展进行内容协商可以降低风险，但不足以防止RFD攻击。</p><p>为了防止RFD攻击，在呈现响应体之前，Spring MVC添加了一个<strong>Content-Disposition:inline;filename=f.txt</strong>  头，以指定固定的下载文件的文件名。这仅在URL路径中包含了一个文件符合以下特征的拓展名时适用：该扩展名既不在信任列表（白名单）中，也没有被显式地被注册于内容协商时使用。并且这种做法还可以有一些副作用，比如，当URL是通过浏览器手动输入的时候。</p><blockquote><p>默认情况下，许多公共路径扩展都是白名单。具有自定义HttpMessageConverter实现的应用程序可以显式注册用于内容协商的文件扩展名，以避免为这些扩展名添加内容处置头。请参见内容类型。<br>有关RFD的其他建议，见CVE-2015-5211。</p></blockquote></blockquote><h5 id="6-Consumable-Media-Types"><a href="#6-Consumable-Media-Types" class="headerlink" title="6.Consumable Media Types"></a>6.Consumable Media Types</h5><p>可以根据请求的内容类型缩小请求映射范围，如下例所示：</p><p>Using a <code>consumes</code> attribute to narrow the mapping by the content type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/pets"</span>, consumes = <span class="string">"application/json"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPet</span><span class="params">(@RequestBody Pet pet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumes属性还支持否定表达式 - ，例如！text/plain是指除text/plain以外的任何内容类型。</li><li>可以在类级别声明一个consumes属性。但与大多数其他请求映射属性不同，当在类级别声明consumes属性时，方法级别会进行属性重写，而不是扩展类级别声明。</li><li>MediaType还为常用的媒体类型（如APPLICATION_JSON_VALUE和APPLICATION_XML_VALUE）提供常量。</li></ul><h5 id="7-Producible-Media-Types"><a href="#7-Producible-Media-Types" class="headerlink" title="7.Producible Media Types"></a>7.Producible Media Types</h5><blockquote><p>与Consumable Media Types相似</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets/&#123;petId&#125;"</span>, produces = <span class="string">"application/json"</span>) </span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pet <span class="title">getPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-Parameters-headers"><a href="#8-Parameters-headers" class="headerlink" title="8.Parameters, headers"></a>8.Parameters, headers</h5><p>可以基于请求参数条件缩小请求映射范围。可以检查是否存在请求参数（myParam），是否缺少一个特定值，及规定特定条件（myParam=myValue）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets/&#123;petId&#125;"</span>, params = <span class="string">"myParam=myValue"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您还可以对请求头条件使用相同的条件，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets"</span>, headers = <span class="string">"myHeader=myValue"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>您可以将内容类型和Accept与headers条件匹配，但最好使用consumers和products。</p></blockquote><h5 id="9-HTTP-HEAD-OPTIONS-HTTP头，选项"><a href="#9-HTTP-HEAD-OPTIONS-HTTP头，选项" class="headerlink" title="9.HTTP HEAD, OPTIONS / HTTP头，选项"></a>9.HTTP HEAD, OPTIONS / HTTP头，选项</h5><blockquote><p>@GetMapping（和@RequestMapping（method=HttpMethod.GET））隐式映射到并支持HTTP HEAD。一个HTTP HEAD请求被当作HTTP GET来处理，只是不写正文，而是计算字节数并设置内容长度头。</p><p>默认情况下，通过将Allow response头设置为所有@RequestMapping方法中列出的能够进行URL匹配的HTTP方法列表来处理HTTP选项。</p><p>对于没有HTTP方法声明的@RequestMapping，Allow头被设置为GET、HEAD、POST、PUT、PATCH、DELETE、OPTIONS。控制器方法应始终声明受支持的HTTP方法（例如，使用HTTP方法特定的变量：@GetMapping、@PostMapping和其他变量）。</p></blockquote><ol start="10"><li><h5 id="Custom-Annotations-自定义注解"><a href="#Custom-Annotations-自定义注解" class="headerlink" title="Custom Annotations/自定义注解"></a>Custom Annotations/自定义注解</h5></li></ol><p>Spring MVC 支持使用组合注解@GetMapping、@PostMapping、@PutMapping、@DeleteMapping和@PatchMapping来执行更具体的用途。</p><blockquote><p>这些注释本身就是用@RequestMapping进行元注释的注释，用于重新声明@RequestMapping属性的一个子集（或全部），具有更窄、更具体的用途。</p><p>Spring MVC还支持具有 <strong>自定义请求匹配逻辑的自定义请求映射属性</strong>，其需要子类化RequestMappingHandlerMapping并重写getCustomMethodCondition方法，可以在该方法中检查自定义属性并返回自己的RequestCondition。</p></blockquote><h5 id="11-Explicit-Registrations-注册处理器方法"><a href="#11-Explicit-Registrations-注册处理器方法" class="headerlink" title="11.Explicit Registrations/注册处理器方法"></a>11.Explicit Registrations/注册处理器方法</h5><p>您可以以编程方式注册处理器方法，这些方法可用于动态注册或高级情况，例如不同URL下同一处理程序的不同实例。以下示例注册处理器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//为控制器注入目标处理程序和处理程序映射。</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandlerMapping</span><span class="params">(RequestMappingHandlerMapping mapping, UserHandler handler)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line"><span class="comment">//准备请求映射元数据。</span></span><br><span class="line">        RequestMappingInfo info = RequestMappingInfo</span><br><span class="line">                .paths(<span class="string">"/user/&#123;id&#125;"</span>).methods(RequestMethod.GET).build(); </span><br><span class="line"><span class="comment">//获取处理器方法。</span></span><br><span class="line">        Method method = UserHandler.class.getMethod("getUser", Long.class); </span><br><span class="line"><span class="comment">//添加注册。</span></span><br><span class="line">        mapping.registerMapping(info, handler, method); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-Handler-Methods-处理器方法"><a href="#1-3-3-Handler-Methods-处理器方法" class="headerlink" title="1.3.3. Handler Methods/处理器方法"></a>1.3.3. Handler Methods/处理器方法</h4><h5 id="1-控制器方法参数描述"><a href="#1-控制器方法参数描述" class="headerlink" title="1.控制器方法参数描述"></a>1.控制器方法参数描述</h5><p>下表描述支持的控制器方法参数。及任何参数都不支持响应类型。</p><table><thead><tr><th align="left">Controller method argument</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>WebRequest</code>, <code>NativeWebRequest</code></td><td align="left">Generic access to request parameters and request and session attributes, without direct use of the Servlet API.</td></tr><tr><td align="left"><code>javax.servlet.ServletRequest</code>, <code>javax.servlet.ServletResponse</code></td><td align="left">Choose any specific request or response type — for example, <code>ServletRequest</code>, <code>HttpServletRequest</code>, or Spring’s <code>MultipartRequest</code>, <code>MultipartHttpServletRequest</code>.</td></tr><tr><td align="left"><code>javax.servlet.http.HttpSession</code></td><td align="left">Enforces the presence of a session. As a consequence, such an argument is never <code>null</code>. Note that session access is not thread-safe. Consider setting the <code>RequestMappingHandlerAdapter</code> instance’s <code>synchronizeOnSession</code> flag to <code>true</code> if multiple requests are allowed to concurrently access a session.</td></tr><tr><td align="left"><code>javax.servlet.http.PushBuilder</code></td><td align="left">Servlet 4.0 push builder API for programmatic HTTP/2 resource pushes. Note that, per the Servlet specification, the injected <code>PushBuilder</code> instance can be null if the client does not support that HTTP/2 feature.</td></tr><tr><td align="left"><code>java.security.Principal</code></td><td align="left">Currently authenticated user — possibly a specific <code>Principal</code> implementation class if known.</td></tr><tr><td align="left"><code>HttpMethod</code></td><td align="left">The HTTP method of the request.</td></tr><tr><td align="left"><code>java.util.Locale</code></td><td align="left">The current request locale, determined by the most specific <code>LocaleResolver</code> available (in effect, the configured <code>LocaleResolver</code> or <code>LocaleContextResolver</code>).</td></tr><tr><td align="left"><code>java.util.TimeZone</code> + <code>java.time.ZoneId</code></td><td align="left">The time zone associated with the current request, as determined by a <code>LocaleContextResolver</code>.</td></tr><tr><td align="left"><code>java.io.InputStream</code>, <code>java.io.Reader</code></td><td align="left">For access to the raw request body as exposed by the Servlet API.</td></tr><tr><td align="left"><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td><td align="left">For access to the raw response body as exposed by the Servlet API.</td></tr><tr><td align="left"><code>@PathVariable</code></td><td align="left">For access to URI template variables. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-uri-templates" target="_blank" rel="noopener">URI patterns</a>.</td></tr><tr><td align="left"><code>@MatrixVariable</code></td><td align="left">For access to name-value pairs in URI path segments. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-matrix-variables" target="_blank" rel="noopener">Matrix Variables</a>.</td></tr><tr><td align="left"><code>@RequestParam</code></td><td align="left">For access to the Servlet request parameters, including multipart files. Parameter values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestparam" target="_blank" rel="noopener"><code>@RequestParam</code></a> as well as <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart-forms" target="_blank" rel="noopener">Multipart</a>.Note that use of <code>@RequestParam</code> is optional for simple parameter values. See “Any other argument”, at the end of this table.</td></tr><tr><td align="left"><code>@RequestHeader</code></td><td align="left">For access to request headers. Header values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestheader" target="_blank" rel="noopener"><code>@RequestHeader</code></a>.</td></tr><tr><td align="left"><code>@CookieValue</code></td><td align="left">For access to cookies. Cookies values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-cookievalue" target="_blank" rel="noopener"><code>@CookieValue</code></a>.</td></tr><tr><td align="left"><code>@RequestBody</code></td><td align="left">For access to the HTTP request body. Body content is converted to the declared method argument type by using <code>HttpMessageConverter</code> implementations. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestbody" target="_blank" rel="noopener"><code>@RequestBody</code></a>.</td></tr><tr><td align="left"><code>HttpEntity</code></td><td align="left">For access to request headers and body. The body is converted with an <code>HttpMessageConverter</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-httpentity" target="_blank" rel="noopener">HttpEntity</a>.</td></tr><tr><td align="left"><code>@RequestPart</code></td><td align="left">For access to a part in a <code>multipart/form-data</code> request, converting the part’s body with an <code>HttpMessageConverter</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart-forms" target="_blank" rel="noopener">Multipart</a>.</td></tr><tr><td align="left"><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td><td align="left">For access to the model that is used in HTML controllers and exposed to templates as part of view rendering.</td></tr><tr><td align="left"><code>RedirectAttributes</code></td><td align="left">Specify attributes to use in case of a redirect (that is, to be appended to the query string) and flash attributes to be stored temporarily until the request after redirect. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-redirecting-passing-data" target="_blank" rel="noopener">Redirect Attributes</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-flash-attributes" target="_blank" rel="noopener">Flash Attributes</a>.</td></tr><tr><td align="left"><code>@ModelAttribute</code></td><td align="left">For access to an existing attribute in the model (instantiated if not present) with data binding and validation applied. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args" target="_blank" rel="noopener"><code>@ModelAttribute</code></a> as well as <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-methods" target="_blank" rel="noopener">Model</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-initbinder" target="_blank" rel="noopener"><code>DataBinder</code></a>.Note that use of <code>@ModelAttribute</code> is optional (for example, to set its attributes). See “Any other argument” at the end of this table.</td></tr><tr><td align="left"><code>Errors</code>, <code>BindingResult</code></td><td align="left">For access to errors from validation and data binding for a command object (that is, a <code>@ModelAttribute</code> argument) or errors from the validation of a <code>@RequestBody</code> or <code>@RequestPart</code> arguments. You must declare an <code>Errors</code>, or <code>BindingResult</code> argument immediately after the validated method argument.</td></tr><tr><td align="left"><code>SessionStatus</code> + class-level <code>@SessionAttributes</code></td><td align="left">For marking form processing complete, which triggers cleanup of session attributes declared through a class-level <code>@SessionAttributes</code> annotation. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattributes" target="_blank" rel="noopener"><code>@SessionAttributes</code></a> for more details.</td></tr><tr><td align="left"><code>UriComponentsBuilder</code></td><td align="left">For preparing a URL relative to the current request’s host, port, scheme, context path, and the literal part of the servlet mapping. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-uri-building" target="_blank" rel="noopener">URI Links</a>.</td></tr><tr><td align="left"><code>@SessionAttribute</code></td><td align="left">For access to any session attribute, in contrast to model attributes stored in the session as a result of a class-level <code>@SessionAttributes</code> declaration. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattribute" target="_blank" rel="noopener"><code>@SessionAttribute</code></a> for more details.</td></tr><tr><td align="left"><code>@RequestAttribute</code></td><td align="left">For access to request attributes. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestattrib" target="_blank" rel="noopener"><code>@RequestAttribute</code></a> for more details.</td></tr><tr><td align="left">Any other argument</td><td align="left">If a method argument is not matched to any of the earlier values in this table and it is a simple type (as determined by <a href="https://docs.spring.io/spring-framework/docs/5.2.5.RELEASE/javadoc-api/org/springframework/beans/BeanUtils.html#isSimpleProperty-java.lang.Class-" target="_blank" rel="noopener">BeanUtils#isSimpleProperty</a>, it is a resolved as a <code>@RequestParam</code>. Otherwise, it is resolved as a <code>@ModelAttribute</code>.</td></tr></tbody></table><h5 id="2-Return-Values"><a href="#2-Return-Values" class="headerlink" title="2.Return Values"></a>2.Return Values</h5><p>下表描述支持的控制器方法返回值。所有返回值都支持响应类型。</p><table><thead><tr><th align="left">Controller method return value</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>@ResponseBody</code></td><td align="left">The return value is converted through <code>HttpMessageConverter</code> implementations and written to the response. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responsebody" target="_blank" rel="noopener"><code>@ResponseBody</code></a>.</td></tr><tr><td align="left"><code>HttpEntity</code>, <code>ResponseEntity</code></td><td align="left">The return value that specifies the full response (including HTTP headers and body) is to be converted through <code>HttpMessageConverter</code> implementations and written to the response. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responseentity" target="_blank" rel="noopener">ResponseEntity</a>.</td></tr><tr><td align="left"><code>HttpHeaders</code></td><td align="left">For returning a response with headers and no body.</td></tr><tr><td align="left"><code>String</code></td><td align="left">A view name to be resolved with <code>ViewResolver</code> implementations and used together with the implicit model — determined through command objects and <code>@ModelAttribute</code> methods. The handler method can also programmatically enrich the model by declaring a <code>Model</code> argument (see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-registration" target="_blank" rel="noopener">Explicit Registrations</a>).</td></tr><tr><td align="left"><code>View</code></td><td align="left">A <code>View</code> instance to use for rendering together with the implicit model — determined through command objects and <code>@ModelAttribute</code> methods. The handler method can also programmatically enrich the model by declaring a <code>Model</code> argument (see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-registration" target="_blank" rel="noopener">Explicit Registrations</a>).</td></tr><tr><td align="left"><code>java.util.Map</code>, <code>org.springframework.ui.Model</code></td><td align="left">Attributes to be added to the implicit model, with the view name implicitly determined through a <code>RequestToViewNameTranslator</code>.</td></tr><tr><td align="left"><code>@ModelAttribute</code></td><td align="left">An attribute to be added to the model, with the view name implicitly determined through a <code>RequestToViewNameTranslator</code>.Note that <code>@ModelAttribute</code> is optional. See “Any other return value” at the end of this table.</td></tr><tr><td align="left"><code>ModelAndView</code> object</td><td align="left">The view and model attributes to use and, optionally, a response status.</td></tr><tr><td align="left"><code>void</code></td><td align="left">A method with a <code>void</code> return type (or <code>null</code> return value) is considered to have fully handled the response if it also has a <code>ServletResponse</code>, an <code>OutputStream</code> argument, or an <code>@ResponseStatus</code> annotation. The same is also true if the controller has made a positive <code>ETag</code> or <code>lastModified</code> timestamp check (see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-caching-etag-lastmodified" target="_blank" rel="noopener">Controllers</a> for details).If none of the above is true, a <code>void</code> return type can also indicate “no response body” for REST controllers or a default view name selection for HTML controllers.</td></tr><tr><td align="left"><code>DeferredResult</code></td><td align="left">Produce any of the preceding return values asynchronously from any thread — for example, as a result of some event or callback. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async" target="_blank" rel="noopener">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-deferredresult" target="_blank" rel="noopener"><code>DeferredResult</code></a>.</td></tr><tr><td align="left"><code>Callable</code></td><td align="left">Produce any of the above return values asynchronously in a Spring MVC-managed thread. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async" target="_blank" rel="noopener">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-callable" target="_blank" rel="noopener"><code>Callable</code></a>.</td></tr><tr><td align="left"><code>ListenableFuture</code>, <code>java.util.concurrent.CompletionStage</code>, <code>java.util.concurrent.CompletableFuture</code></td><td align="left">Alternative to <code>DeferredResult</code>, as a convenience (for example, when an underlying service returns one of those).</td></tr><tr><td align="left"><code>ResponseBodyEmitter</code>, <code>SseEmitter</code></td><td align="left">Emit a stream of objects asynchronously to be written to the response with <code>HttpMessageConverter</code> implementations. Also supported as the body of a <code>ResponseEntity</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async" target="_blank" rel="noopener">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-http-streaming" target="_blank" rel="noopener">HTTP Streaming</a>.</td></tr><tr><td align="left"><code>StreamingResponseBody</code></td><td align="left">Write to the response <code>OutputStream</code> asynchronously. Also supported as the body of a <code>ResponseEntity</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async" target="_blank" rel="noopener">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-http-streaming" target="_blank" rel="noopener">HTTP Streaming</a>.</td></tr><tr><td align="left">Reactive types — Reactor, RxJava, or others through <code>ReactiveAdapterRegistry</code></td><td align="left">Alternative to <code>DeferredResult</code> with multi-value streams (for example, <code>Flux</code>, <code>Observable</code>) collected to a <code>List</code>.For streaming scenarios (for example, <code>text/event-stream</code>, <code>application/json+stream</code>), <code>SseEmitter</code> and <code>ResponseBodyEmitter</code> are used instead, where <code>ServletOutputStream</code> blocking I/O is performed on a Spring MVC-managed thread and back pressure is applied against the completion of each write.See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async" target="_blank" rel="noopener">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-reactive-types" target="_blank" rel="noopener">Reactive Types</a>.</td></tr><tr><td align="left">Any other return value</td><td align="left">Any return value that does not match any of the earlier values in this table and that is a <code>String</code> or <code>void</code> is treated as a view name (default view name selection through <code>RequestToViewNameTranslator</code> applies), provided it is not a simple type, as determined by <a href="https://docs.spring.io/spring-framework/docs/5.2.5.RELEASE/javadoc-api/org/springframework/beans/BeanUtils.html#isSimpleProperty-java.lang.Class-" target="_blank" rel="noopener">BeanUtils#isSimpleProperty</a>. Values that are simple types remain unresolved.</td></tr></tbody></table><p>3.类型转换</p><blockquote><p>如果参数声明为字符串以外的其他值，则<strong>表示基于字符串的请求输入的某些带注释的控制器方法参数</strong>（例如@RequestParam、@RequestHeader、@PathVariable、@MatrixVariable和@CookieValue）可能需要类型转换。</p></blockquote><p>在这种情况下，根据配置的转换器自动应用类型转换。默认情况下，支持简单类型（int、long、Date和其他类型）。可以通过WebDataBinder（请参阅DataBinder）或通过向FormattingConversionService注册格式化程序来自定义类型转换。请参见Spring字段格式。</p><h5 id="3-MatrixVariable-矩阵变量"><a href="#3-MatrixVariable-矩阵变量" class="headerlink" title="3.@MatrixVariable/矩阵变量"></a>3.@MatrixVariable/矩阵变量</h5><blockquote><p>矩阵变量可以出现在任何路径段中，每个变量用分号分隔，多个值用逗号分隔（例如，/cars；color=red，green；year=2012）。也可以通过重复的变量名指定多个值（例如，color=red；color=green；color=blue）。</p></blockquote><p>如果URL预期包含矩阵变量，则控制器方法的请求映射必须使用一个URI变量来屏蔽该变量内容，并确保可以独立于矩阵变量的顺序和存在,进行成功匹配。以下示例使用矩阵变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /pets/42;q=11;r=22</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId, @MatrixVariable <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// petId == 42</span></span><br><span class="line">    <span class="comment">// q == 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到所有路径段都可能包含矩阵变量，您有时可能需要消除矩阵变量位于对应路径变量中的歧义。下面的示例演示了如何执行此操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /owners/42;q=11/pets/21;q=22</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @MatrixVariable(name=<span class="string">"q"</span>, pathVar=<span class="string">"ownerId"</span>)</span> <span class="keyword">int</span> q1,</span></span><br><span class="line"><span class="function">        @<span class="title">MatrixVariable</span><span class="params">(name=<span class="string">"q"</span>, pathVar=<span class="string">"petId"</span>)</span> <span class="keyword">int</span> q2) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// q1 == 11</span></span><br><span class="line">    <span class="comment">// q2 == 22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将矩阵变量定义为可选变量，并指定默认值，如下例所示：</p><p>要获取所有矩阵变量，可以使用多值映射，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET /owners/42;q=11;r=12/pets/21;q=22;s=23</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @MatrixVariable MultiValueMap&lt;String, String&gt; matrixVars,</span></span></span><br><span class="line"><span class="function"><span class="params">        @MatrixVariable(pathVar=<span class="string">"petId"</span>)</span> MultiValueMap&lt;String, String&gt; petMatrixVars) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// matrixVars: ["q" : [11,22], "r" : 12, "s" : 23]</span></span><br><span class="line">    <span class="comment">// petMatrixVars: ["q" : 22, "s" : 23]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用矩阵变量：</p><ul><li>在MVC Java配置中，需要在路径匹配中将UrlPathHelper设置为removeSemicolonContent=false。</li><li>在MVC XML名称空间中，可以设置&lt;MVC:annotation-driven enable matrix variables=“true”/&gt;。</li></ul><h5 id="4-RequestParam"><a href="#4-RequestParam" class="headerlink" title="4.@RequestParam"></a>4.<code>@RequestParam</code></h5><p>可以使用@RequestParam注释将Servlet请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pets"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="comment">//Using @RequestParam to bind petId.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setupForm</span><span class="params">(@RequestParam(<span class="string">"petId"</span>)</span> <span class="keyword">int</span> petId, Model model) </span>&#123; </span><br><span class="line">        Pet pet = <span class="keyword">this</span>.clinic.loadPet(petId);</span><br><span class="line">        model.addAttribute(<span class="string">"pet"</span>, pet);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"petForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，使用@RequestParam的方法参数是必需的，但是您可以通过将@RequestParam的required属性设置为false 或使用java.util.optional包装声明参数 来指定方法参数是可选的。</p><ol><li>如果目标方法参数类型不是字符串，则自动应用类型转换。请参见类型转换。</li><li>将参数类型声明为数组或列表 允许解析同一参数名的多个参数值。</li><li>当@RequestParam注释声明为Map&lt;String，String&gt;或MultiValueMap&lt;String，String&gt;时，如果没有在注释中指定参数名，则映射将填充每个给定参数名的请求参数值。</li></ol></blockquote><h5 id="5-RequestHeader"><a href="#5-RequestHeader" class="headerlink" title="5.@RequestHeader"></a>5.<code>@RequestHeader</code></h5><h5 id="6-CookieValue"><a href="#6-CookieValue" class="headerlink" title="6.@CookieValue"></a>6.<code>@CookieValue</code></h5><h5 id="7-ModelAttribute"><a href="#7-ModelAttribute" class="headerlink" title="7.@ModelAttribute"></a>7.<code>@ModelAttribute</code></h5><p>可以对方法参数使用@ModeAttribute注释来访问模型中的属性，或者在不存在的情况下将其实例化。</p><blockquote><p>model属性还覆盖有来自HTTP Servlet请求参数的值，这些参数的名称会与字段名匹配，进行<strong>数据绑定</strong>，这样就<strong>不必处理解析和转换单个查询参数和表单字段</strong>。下面的示例演示了如何执行此操作：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>)</span><br><span class="line"><span class="comment">//Bind an instance of Pet.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>一般情况是使用Model类型接收数据，但也可依赖转换器&lt;String，T&gt;和URI路径变量匹配机制来接收。</p><blockquote><p>在下面的示例中，模型属性名称account与URI路径变量account匹配，通过默认注册的转换器&lt;String，account&gt;将字符串类型的账户号转换成account类型，完成加载：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/accounts/&#123;account&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@ModelAttribute(<span class="string">"account"</span>)</span> Account account) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取Model实例后，进行数据绑定。WebDataBinder类 将Servlet请求参数名（查询参数和表单字段）与目标对象上的字段名匹配。必要时，在进行类型转换后填充匹配字段。</p><blockquote><p>有关数据绑定（和验证）的更多信息，请参阅 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation" target="_blank" rel="noopener">Validation</a>。有关自定义数据绑定的详细信息，请参阅<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-initbinder" target="_blank" rel="noopener"><code>DataBinder</code></a>。</p></blockquote><p>数据绑定可能导致错误。默认情况下，会引发BindException。但是，要检查controller方法中是否存在此类错误，可以在@ModelAttribute旁边立即添加<strong>BindingResult参数</strong>，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>)</span><br><span class="line"><span class="comment">//Adding a BindingResult next to the @ModelAttribute.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute(<span class="string">"pet"</span>)</span> Pet pet, BindingResult result) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"petForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些情况下，您可能希望访问不带数据绑定的模型属性。对于这种情况，可以<strong>将模型注入控制器并直接访问它</strong>，或者<strong>设置@modeltattribute（binding=false）</strong>，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AccountForm <span class="title">setUpForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountForm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findAccount</span><span class="params">(@PathVariable String accountId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountRepository.findOne(accountId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@Valid AccountForm form, BindingResult result,</span></span></span><br><span class="line"><span class="function"><span class="params">        @ModelAttribute(binding=<span class="keyword">false</span>)</span> Account account) </span>&#123; <span class="comment">//Setting @ModelAttribute(binding=false).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过添加 javax.validation.Valid 注释或Spring的@Validated注释（ <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation" target="_blank" rel="noopener">Bean Validation</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation" target="_blank" rel="noopener">Spring validation</a>），可以在数据绑定后进行自动验证。下面的示例演示了如何执行此操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>)</span><br><span class="line"><span class="comment">//Validate the Pet instance.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@Valid @ModelAttribute(<span class="string">"pet"</span>)</span> Pet pet, BindingResult result) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"petForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-SessionAttributes"><a href="#8-SessionAttributes" class="headerlink" title="8.@SessionAttributes"></a><code>8.@SessionAttributes</code></h5><h5 id="9-SessionAttribute"><a href="#9-SessionAttribute" class="headerlink" title="9.@SessionAttribute"></a><code>9.@SessionAttribute</code></h5><h5 id="10-RequestAttribute"><a href="#10-RequestAttribute" class="headerlink" title="10.@RequestAttribute"></a><code>10.@RequestAttribute</code></h5><h5 id="11-Redirect-Attributes-重定向属性"><a href="#11-Redirect-Attributes-重定向属性" class="headerlink" title="11.Redirect Attributes/重定向属性"></a>11.Redirect Attributes/重定向属性</h5><ul><li>默认情况下，所有模型属性都被视为重定向URL中的URI模板变量。其余的属性中，那些是基元类型或基元类型的集合或数组的属性将自动附加为查询参数。</li><li>如果模型实例是专门为重定向准备的，则将基元类型属性作为查询参数追加可能是所需的结果。但是，在带注释的控制器中，模型可以包含为渲染目的添加的其他属性（例如，下拉字段值）。为了避免在URL中出现这样的属性，@RequestMapping方法可以声明一个类型为RedirectAttributes的参数，并使用它指定可用于RedirectView的确切属性。如果方法确实重定向，则使用RedirectAttributes的内容。否则，将使用模型的内容。</li><li>RequestMappingHandlerAdapter提供了一个名为ignoreDefaultModelOnRedirect的标志，您可以使用该标志指示如果控制器方法重定向，则不应使用默认模型的内容。相反，controller方法应该声明一个类型为RedirectAttributes的属性，或者，如果它没有这样做，则不应该将任何属性传递给RedirectView。MVC名称空间和MVC Java配置都将此标志设置为false，以保持向后兼容性。但是，对于新应用程序，我们建议将其设置为true。</li><li>请注意，当前请求中的URI模板变量在展开重定向URL时自动可用，您不需要通过Model或RedirectAttributes显式添加它们。下面的示例演示如何定义重定向：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/files/&#123;path&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:files/&#123;path&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Another way</span><br></pre></td></tr></table></figure><p>将数据传递到重定向目标的另一种方法是使用flash属性。与其他重定向属性不同，flash属性保存在HTTP会话中（因此不会出现在URL中）。有关详细信息，请参见Flash属性。</p><h5 id="12-Flash-Attributes"><a href="#12-Flash-Attributes" class="headerlink" title="12.Flash Attributes"></a>12.Flash Attributes</h5><ul><li>Flash属性为一个请求提供了一种方法来存储打算在另一个请求中使用的属性。这是重定向 - 时最常用的方法，例如，Post Redirect Get模式。Flash属性在重定向之前（通常在会话中）被临时保存，以便在重定向之后对请求可用，并立即被删除。</li><li>Spring MVC有两个主要的抽象来支持flash属性。FlashMap用于保存flash属性，而FlashMapManager用于存储、检索和管理FlashMap实例。</li><li>Flash属性支持始终为“on”，不需要显式启用。但是，如果不使用，它永远不会导致创建HTTP会话。对于每个请求，都有一个“input”FlashMap，其中包含从上一个请求（如果有的话）传递的属性，还有一个“output”FlashMap，其中包含要为后续请求保存的属性。这两个FlashMap实例都可以从Spring MVC的任何地方通过requestcontexttils中的静态方法访问。</li><li>带注释的控制器通常不需要直接使用FlashMap。相反，@RequestMapping方法可以接受redirect attributes类型的参数，并使用它为重定向场景添加flash属性。通过RedirectAttributes添加的Flash属性会自动传播到“output”FlashMap。类似地，重定向之后，“input”FlashMap中的属性会自动添加到为目标URL服务的控制器模型中。</li></ul><blockquote><p><strong>将请求与flash属性匹配</strong></p><p>flash属性的概念存在于许多其他web框架中，并被证明有时会暴露在并发性问题中。这是因为，根据定义，flash属性将存储到下一个请求。但是，“下一个”请求可能不是预期的接收者，而是另一个异步请求（例如，轮询或资源请求），在这种情况下，flash属性被过早删除。</p><p>为了减少此类问题的可能性，RedirectView会使用目标重定向URL的路径和查询参数自动“标记”FlashMap实例。反过来，默认的FlashMapManager在查找“input”FlashMap时会将该信息与传入的请求相匹配。</p><p>这并不能完全消除并发问题的可能性，但是通过重定向URL中已有的信息可以大大降低并发问题的可能性。因此，我们建议您主要在重定向场景中使用flash属性。</p></blockquote><h5 id="13-Multipart"><a href="#13-Multipart" class="headerlink" title="13.Multipart"></a>13.Multipart</h5><p>启用MultipartResolver后，将解析带有multipart/form数据的POST请求的内容，并将其作为常规请求参数进行访问。以下示例访问一个常规表单字段和一个上载文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleFormUpload</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;<span class="comment">//将参数类型声明为List&lt;MultipartFile&gt;允许解析同一参数名的多个文件。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            <span class="comment">// store the bytes somewhere</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:uploadSuccess"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:uploadFailure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当@RequestParam注释声明为Map&lt;String，MultipartFile&gt;或MultiValueMap&lt;String，MultipartFile&gt;时，如果没有在注释中指定参数名，则会使用MultipartFile的参数名填充映射。</p></blockquote><blockquote><p>对于Servlet3.0多部分解析，您还可以使用javax.Servlet.http.Part代替Spring的MultipartFile，声明方法参数或集合值类型。</p></blockquote><p>您还可以将多部分内容用作到命令对象的数据绑定的一部分。例如，上例中的表单字段和文件可以是表单对象上的字段，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultipartFile file;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleFormUpload</span><span class="params">(MyForm form, BindingResult errors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!form.getFile().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = form.getFile().getBytes();</span><br><span class="line">            <span class="comment">// store the bytes somewhere</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:uploadSuccess"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:uploadFailure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在RESTful服务场景中，也可以从非浏览器客户端提交多部分请求。以下示例显示了一个带有JSON数据的文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /someUrl</span><br><span class="line">Content-Type: multipart/mixed</span><br><span class="line"></span><br><span class="line">--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp</span><br><span class="line">Content-Disposition: form-data; name="meta-data"</span><br><span class="line">Content-Type: application/json; charset=UTF-8</span><br><span class="line">Content-Transfer-Encoding: 8bit</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line">--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp</span><br><span class="line">Content-Disposition: form-data; name="file-data"; filename="file.properties"</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Transfer-Encoding: 8bit</span><br><span class="line">... File Data ...</span><br></pre></td></tr></table></figure><p>您可以使用@RequestParam作为字符串访问“元数据”部分，但您可能希望它从JSON反序列化（类似于@RequestBody）。使用HttpMessageConverter转换多部分后，使用@RequestPart注释访问该多部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@RequestPart(<span class="string">"meta-data"</span>)</span> MetaData metadata,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestPart</span><span class="params">(<span class="string">"file-data"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以将@RequestPart与javax.validation.Valid结合使用，也可以使用Spring的@Validated注释，这两种注释都会应用标准Bean验证。默认情况下，验证错误会导致MethodArgumentNotValidException，该异常将转换为400（错误的请求）响应。或者，可以通过errors或BindingResult参数在控制器内本地处理验证错误，如下例所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;&quot;)</span><br><span class="line">public String handle(@Valid @RequestPart(&quot;meta-data&quot;) MetaData metadata,</span><br><span class="line">        BindingResult result) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14-RequestBody"><a href="#14-RequestBody" class="headerlink" title="14.@RequestBody"></a>14.<code>@RequestBody</code></h5><p>可以使用@RequestBody注释通过HttpMessageConverter将请求体读取并反序列化为对象。以下示例使用@RequestBody参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestBody Account account)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用MVC配置的消息转换器选项来配置或自定义消息转换。</p><p>可以将@RequestBody与javax.validation.Valid或Spring的@Validated注释结合使用，这两种方法都会应用标准Bean验证。默认情况下，验证错误会导致MethodArgumentNotValidException，该异常将转换为400（错误的请求）响应。或者，可以通过errors或BindingResult参数在控制器内本地处理验证错误，如下例所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@Valid @RequestBody Account account, BindingResult result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15-HttpEntity"><a href="#15-HttpEntity" class="headerlink" title="15.HttpEntity"></a>15.HttpEntity</h5><p>HttpEntity或多或少与使用@RequestBody相同，但它基于公开请求头和主体的容器对象。下面的列表显示了一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpEntity&lt;Account&gt; entity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="16-ResponseBody"><a href="#16-ResponseBody" class="headerlink" title="16.@ResponseBody"></a>16.@ResponseBody</h5><p>可以对方法使用@ResponseBody注释，通过HttpMessageConverter将其序列化结果返回到响应体。下面的列表显示了一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/accounts/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ResponseBody可以在类级别使用，在这种情况下，它由所有控制器方法继承。这就是@RestController，一个@Controller和@ResponseBody的组合注释。</p><ol><li>可以将@ResponseBody与反应类型【reactive types】一起使用。有关更多详细信息，请参阅异步请求和响应类型。</li><li>可以使用MVC配置的消息转换器选项来配置或自定义消息转换。</li><li>可以将@ResponseBody方法与JSON序列化视图结合起来。有关详细信息，请参见Jackson JSON。</li></ol><h5 id="17-ResponseEntity"><a href="#17-ResponseEntity" class="headerlink" title="17.ResponseEntity"></a>17.ResponseEntity</h5><p>ResponseEntity类似于@ResponseBody，但带有状态和标题。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/something"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String body = ... ;</span><br><span class="line">    String etag = ... ;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok().eTag(etag).build(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC支持使用单值反应类型 异步生成响应，和/或为主体生成单值和多值反应类型。</p><h5 id="18-Jackson-JSON"><a href="#18-Jackson-JSON" class="headerlink" title="18.Jackson JSON"></a>18.Jackson JSON</h5><blockquote><p>Spring提供了对Jackson JSON库的支持。</p></blockquote><h6 id="18-1-JSON-Views"><a href="#18-1-JSON-Views" class="headerlink" title="18.1 JSON Views"></a>18.1 JSON Views</h6><p>Spring MVC为Jackson的序列化视图提供了内置支持，它只允许呈现对象中所有字段的子集。要将其与@ResponseBody或ResponseEntity控制器方法一起使用，可以使用Jackson的@JsonView注释激活序列化视图类，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@JsonView</span>(User.WithoutPasswordView<span class="class">.<span class="keyword">class</span>)//使用<span class="title">Jackson</span>的@<span class="title">JsonView</span>注释激活序列化视图类</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">User</span> <span class="title">getUser</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"eric"</span>, <span class="string">"7!jd#h23"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WithoutPasswordView</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WithPasswordView</span> <span class="keyword">extends</span> <span class="title">WithoutPasswordView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(WithoutPasswordView<span class="class">.<span class="keyword">class</span>)//使用<span class="title">Jackson</span>的@<span class="title">JsonView</span>注释激活序列化视图类</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getUsername</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(WithPasswordView<span class="class">.<span class="keyword">class</span>)//使用<span class="title">Jackson</span>的@<span class="title">JsonView</span>注释激活序列化视图类</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getPassword</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@JsonView允许视图类数组，但每个控制器方法只能指定一个。如果需要激活多个视图，可以使用复合界面。</p></blockquote><p>对于依赖视图解析的控制器，可以将<strong>序列化视图类添加到模型</strong>中，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">AbstractController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User(<span class="string">"eric"</span>, <span class="string">"7!jd#h23"</span>));</span><br><span class="line">        <span class="comment">//对于依赖视图解析的控制器，可以将**序列化视图类添加到模型**中</span></span><br><span class="line">        model.addAttribute(JsonView<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">User</span>.<span class="title">WithoutPasswordView</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"userView"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-Model"><a href="#1-3-4-Model" class="headerlink" title="1.3.4. Model"></a>1.3.4. Model</h4><p><strong>可以使用@ModeltAttribute注释：</strong></p><ol><li>在@RequestMapping方法中的方法参数上<strong>创建或访问模型中的对象</strong>，并通过WebDataBinder将其<strong>绑定</strong>到请求。</li><li>作为@Controller或@ControllerAdvice类中的方法级注释，有助于在调用任何@RequestMapping方法之前<strong>初始化模型</strong>。</li><li>在@RequestMapping方法上，标记其返回值的是一个<strong>model属性</strong>。</li></ol><p>本节讨论前面列表中的第二项@ModelAttribute methods。</p><p>@ModelAttribute方法也可以通过<strong>@ControllerAdvice在控制器之间共享</strong>。有关更多详细信息，请参阅控制器建议部分。<br>@ModelAttribute方法具有灵活的方法签名。除了@ModeltAttribute本身或任何与请求体相关的参数, 它们支持许多与@RequestMapping方法相同的参数<br>以下示例显示@ModelAttribute方法：</p><ul><li><p>控制器可以有任意数量的@ModelAttribute方法。所有这些方法都在同一控制器中的@RequestMapping方法之前调用。@ModelAttribute方法也可以通过@ControllerAdvice在控制器之间共享。有关更多详细信息，请参阅控制器建议部分。</p></li><li><p>@ModelAttribute方法具有灵活的方法签名。除了@modeltattribute本身或任何与请求体相关的参数。，它们还支持许多与@RequestMapping方法相同的参数。</p></li></ul><p>以下示例显示@ModelAttribute方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateModel</span><span class="params">(@RequestParam String number, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(accountRepository.findAccount(number));</span><br><span class="line">    <span class="comment">// add more ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下示例仅添加一个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountRepository.findAccount(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果未显式指定名称，则根据对象类型选择默认名称，如javadoc for Conventions中所述。始终可以通过使用重载的addAttribute方法或通过@ModeltAttribute上的name属性（返回值）指定显式名称。</p></blockquote><blockquote><p>还可以使用@ModeltAttribute作为@RequestMapping方法的方法级注释，在这种情况下，<strong>@RequestMapping方法的返回值被解释为模型属性</strong>。这通常不是必需的，因为这是HTML控制器中的默认行为，除非返回值是一个字符串，否则将被解释为视图名称。@ModelAttribute还可以自定义模型属性名称，如下例所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/accounts/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"myAccount"</span>)<span class="comment">//@ModelAttribute还可以自定义模型属性名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5-DataBinder"><a href="#1-3-5-DataBinder" class="headerlink" title="1.3.5. DataBinder"></a>1.3.5. <code>DataBinder</code></h4><p>@Controller或@ControllerAdvice类可以有@InitBinder方法来初始化WebDataBinder实例，而这些方法反过来又可以：</p><ol><li>将请求参数（即表单或查询数据）绑定到模型对象。</li><li>将基于字符串的请求值（例如请求参数、路径变量、头、cookies和其他）转换为控制器方法参数的目标类型。</li><li>在呈现HTML表单时，将模型对象值格式化为字符串值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span> <span class="comment">//Defining an @InitBinder method.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        dateFormat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        binder.registerCustomEditor(Date<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">CustomDateEditor</span>(<span class="title">dateFormat</span>, <span class="title">false</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span> <span class="comment">//在自定义格式化程序上定义@InitBinder方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-6-Exceptions"><a href="#1-3-6-Exceptions" class="headerlink" title="1.3.6. Exceptions"></a>1.3.6. Exceptions</h4><p>@Controller和@ControllerAdvice类可以有@ExceptionHandler方法来处理来自Controller方法的异常，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handle</span><span class="params">(IOException ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，注释声明可以缩小要匹配的异常类型的范围，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;FileSystemException<span class="class">.<span class="keyword">class</span>, <span class="title">RemoteException</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">IOException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您甚至可以使用具有通用的参数签名的特定异常类型，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;FileSystemException<span class="class">.<span class="keyword">class</span>, <span class="title">RemoteException</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-7-Controller-Advice"><a href="#1-3-7-Controller-Advice" class="headerlink" title="1.3.7. Controller Advice"></a>1.3.7. Controller Advice</h4><p>通常，@ExceptionHandler、@InitBinder和@ModelAttribute方法应用于声明它们的@Controller类（或类层次结构）中。如果您希望这些方法在全局范围内（跨控制器）应用得更多，可以在用@ControllerAdvice或@RestControllerAdvice注释的类中声明它们。</p><ul><li>@ControllerAdvice用@Component注释，这意味着可以通过组件扫描将这些类注册为springbean。</li><li>@RestControllerAdvice是一个组合注释，它使用@ControllerAdvice和@ResponseBody进行注释，这实际上意味着@ExceptionHandler方法通过消息转换（相对于视图解析或模板呈现）呈现到响应体。</li><li>启动时，@RequestMapping和@ExceptionHandler方法的基础结构类会检测用@ControllerAdvice注释的springbean，然后在运行时应用它们的方法。全局@ExceptionHandler方法（来自@ControllerAdvice）在本地方法（来自@Controller）之后应用。相反，全局@ModelAttribute和@InitBinder方法在本地方法之前应用。</li></ul><p>默认情况下，@ControllerAdvice方法应用于每个请求（即，所有控制器），但您可以使用注解上的属性将其缩小到控制器的子集，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Target all Controllers annotated with @RestController</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExampleAdvice1</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers within specific packages</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(<span class="string">"org.example.controllers"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleAdvice2</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers assignable to specific classes</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(assignableTypes = &#123;ControllerInterface<span class="class">.<span class="keyword">class</span>, <span class="title">AbstractController</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExampleAdvice3</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-Functional-Endpoints"><a href="#1-4-Functional-Endpoints" class="headerlink" title="1.4. Functional Endpoints"></a>1.4. Functional Endpoints</h3><h3 id="1-10-View-Technologies"><a href="#1-10-View-Technologies" class="headerlink" title="1.10. View Technologies"></a>1.10. View Technologies</h3><blockquote><p>在Spring MVC中使用视图技术是可插入的，无论您决定使用Thymeleaf、Groovy标记模板、jsp还是其他技术，这主要取决于配置更改。本章介绍与Spring MVC集成的视图技术。我们假设您已经熟悉视图分辨率。</p></blockquote><h4 id="1-10-1-Thymeleaf"><a href="#1-10-1-Thymeleaf" class="headerlink" title="1.10.1. Thymeleaf"></a>1.10.1. Thymeleaf</h4><blockquote><p>Thymeleaf是一个现代的服务器端Java模板引擎，它提倡通过双击在浏览器中预览自然HTML模板，这对于在不需要运行服务器的情况下独立处理UI模板（例如，由设计器）非常有帮助。Thymeleaf提供了一组最广泛的功能，去转换jsp页面。有关更完整的介绍，请参见Thymeleaf项目主页。</p><p>Thymeleaf与Spring MVC的集成由Thymeleaf项目管理。该配置涉及几个bean声明，如<strong>ServletContextTemplateResolver、SpringTemplateEngine和ThymeleafViewResolver</strong>。有关更多详细信息，请参见Thymeleaf+Spring。</p></blockquote><h4 id="1-10-2-FreeMarker"><a href="#1-10-2-FreeMarker" class="headerlink" title="1.10.2. FreeMarker"></a>1.10.2. FreeMarker</h4><h5 id="Form-Handling"><a href="#Form-Handling" class="headerlink" title="Form Handling"></a>Form Handling</h5><p>如果希望应用程序通过内部代码（例如）处理城市，则可以使用适当的键创建代码映射，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Map&lt;String, ?&gt; referenceData(HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, String&gt; cityMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    cityMap.put(<span class="string">"LDN"</span>, <span class="string">"London"</span>);</span><br><span class="line">    cityMap.put(<span class="string">"PRS"</span>, <span class="string">"Paris"</span>);</span><br><span class="line">    cityMap.put(<span class="string">"NYC"</span>, <span class="string">"New York"</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    model.put(<span class="string">"cityMap"</span>, cityMap);</span><br><span class="line">    <span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP-协议中-URI-和-URL-有什么区别？"><a href="#HTTP-协议中-URI-和-URL-有什么区别？" class="headerlink" title="HTTP 协议中 URI 和 URL 有什么区别？"></a>HTTP 协议中 URI 和 URL 有什么区别？</h3><p><strong>URI包括URL和URN两个类别，URL是URI的子集，所以URL一定是URI，而URI不一定是URL</strong></p><ul><li>URI = Universal Resource Identifier 统一资源标志符，用来标识抽象或物理资源的一个紧凑字符串。</li><li>URL = Universal Resource Locator 统一资源定位符，一种定位资源的主要访问机制的字符串，一个标准的URL必须包括：protocol、host、port、path、parameter、anchor。</li><li>URN = Universal Resource Name 统一资源名称，通过特定命名空间中的唯一名称或ID来标识资源。</li></ul><blockquote><p>假设所有的Html文档都有唯一的编号，记作html:xxxxx，xxxxx是一串数字，即Html文档的身份证号码，这个能唯一标识一个Html文档，那么这个号码就是一个URI。<br>而URL则通过描述是哪个主机上哪个路径上的文件来唯一确定一个资源，也就是定位的方式来实现的URI。</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2020/07/22/%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/07/22/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/22/hello-world/"/>
      <url>/2020/07/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7-构造方法与参数传递</title>
      <link href="/2019/12/22/7-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%8E%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
      <url>/2019/12/22/7-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%8E%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>4、构造方法<br>1.关于java类中的构造方法：<br>①构造方法又被称为构造函数/构造器/Constructor<br>②<br>—构造方法语法结构：<br>[修饰符列表] 构造方法名（形参列表）｛<br>构造方法体；<br>｝<br>—对比普通方法的语法结构：<br>[修饰符列表] 返回值类型 构造方法名（形参列表）｛<br>方法体；<br>｝<br>PS：对于构造方法来说，“返回值类型”不需要指定，并且也不能写void，只要写上了void，那么这个方法就变成普通方法了。<br>③对于构造方法，其方法名必须和类名保持一致。<br>④构造方法的作用？<br>—通过构造方法的调用，可以创建对象<br>⑦构造方法的调用：new 构造方法名（实参列表）；<br>—普通方法的调用：类名.方法名（实参列表）；或 引用.方法名(实参列表）：<br>⑧构造方法调用执行之后，有返回值吗？<br>——每一个构造方法实际上执行结束之后都有返回值，但是这个“return 值；”这样的语句不需要写。构造方法结束时java程序自动返回值，并且返回值的类型是构造方法所在类的类型。由于构造方法返回值的类型就是类本身，所以返回值类型不需要编写。<br>⑨当一个类中没有定义任何的构造方法，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为缺省构造器。<br>—当一个类中有定义任何的构造方法，系统不再为这个类提供缺省构造器。建议开发中手动为当前类提供无参数构造方法。<br>⑩构造方法支持重载机制。在一个类中编写多个构造方法，构成方法重载机制。<br>2.构造方法的作用<br>（1）创建对象<br>（2）创建对象的同时，初始化实例变量的内存空间（赋值）<br>3.成员变量之实例变量，属于对象级别的变量，这种变量必须先有对象才能有实例变量。<br>4.实例变量在没有手动赋值的时候，系统默认赋值，那么这个系统默认赋值是在什么时候完成的呢？<br>—是在类加载的时候吗？不是，因为类加载的时候只加载了代码片段，还没来得及创建对象，所以此时实例变量并没有初始化。<br>—实际上，实例变量的内存空间是在构造方法执行过程中完成开辟的，完成初始化的。<br>—系统在默认赋值的时候，也是在构造方法执行过程中完成的赋值。</p><p>单行注释：ctrl+/  多行注释：ctrl+shift+/<br>查看访问的方法：按ctrl并移动到查看元素上，出现下划线时单击。<br>查看含有多个元素的类：在当前类中使用ctrl+o快捷键，然后输入查找的元素名称。</p><hr><p>5、对象和引用：</p><pre><code>5.1、对象和引用的概念？    * 对象：目前在使用new运算符在堆内存中开辟的内存空间称为对象。    * 引用：是一个变量，不一定是局部变量，还可能是成员变量。引用保存了内存地址，指向了堆内存当中的对象。    * 所有访问实例相关的数据，都需要通过“引用.”的方式访问，因为只有通过引用才能找到对象。    * 只有一个空的引用，访问对象的实例相关的数据会出现空指针异常。    class Student{        Computer com; //com是一个引用【实例变量】        public static void doSome(){            Computer cc; //cc是一个引用【局部变量】        }    }5.2、参数的传递？——值传递 or 内容物（值或地址）的传递    主要研究和学习的是方法在调用的时候，涉及到参数传递的问题，到底是怎么传递数据的呢？        int i = 10;        int j = i; //i传递给j，实际上只是将i变量中保存的10传递给j了，j实际上是一块全新的内存空间。        User u = 0x1234;        User u2 = u; //u传递给u2，实际上是将0x1234这个值赋值给u2了，u和u2实际上是两个不同的局部变量，                         //但是它们这两个变量指向堆内存中同一个java对象。</code></pre><p>public class Constructor01 {</p><pre><code>public static void main(String[] args) {    User1 u= new User1(20); System.out.println(&quot;main1--&gt;&quot;+u.age);//20    add(u);    System.out.println(&quot;main2--&gt;&quot;+u.age);//21}public static void add(User1 u) {    u.age++;    System.out.println(&quot;add--&gt;&quot;+u.age);//21}</code></pre><p>}<br>class User1{<br>        int age;<br>        public User1(int u){<br>            age=u;<br>    }<br>}<br>—————————————————————————————2019.12.22学习“构造方法”、“参数传递”。<br>脑壳晕：有空再来复习</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础-类与对象</title>
      <link href="/2019/12/19/6%20java%E5%9F%BA%E7%A1%80-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/12/19/6%20java%E5%9F%BA%E7%A1%80-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>第三章：面向对象【Java语言的核心机制，最重要的内容，Java语言的特色】</p><p>1.* 面向过程和面向对象的区别</p><p>（1）- 面向过程：<br>主要关注点是：实现的具体过程，因果关系【集成显卡的开发思路】</p><pre><code>* 优点：对于业务逻辑比较简单的程序，可以达到快速开发，前期投入成本较低。* 缺点：采用面向过程的方式开发很难解决非常复杂的业务逻辑，另外面向过程的方式导致软件元素之间的“耦合度”非常高，只要其中一环出问题，整个系统受到影响，</code></pre><p>导致最终的软件“扩展力”差。另外，由于没有独立体的概念，所以无法达到组件复用。</p><p>（2）- 面向对象：<br>主要关注点是：主要关注对象【独立体】能完成哪些功能。【独立显卡的开发思路】</p><pre><code>    * 优点：耦合度低，扩展力强。更容易解决现实世界当中更复杂的业务逻辑。组件复用性强。    * 缺点：前期投入成本较高，需要进行独立体的抽取，大量的系统分析与设计。- C语言是纯面向过程的、C++半面向对象、Java纯面向对象- 现在出现的一些新的编程语言多数都是面向对象的。人在认识现实世界的时候以面向对象的方式。- 面向对象更符合人的思维方式。</code></pre><p>2.* 面向对象的三大特征【先背会】<br>        - 封装<br>        - 继承<br>        - 多态<br>        所有面向对象的编程语言都有这三大特征。</p><p>3.采用面向对象的方式开发一个软件，生命周期当中：【整个生命周期中贯穿使用OO面向对象方式】<br>            * 面向对象的分析：OOA  Object-Oriented Analysis<br>            * 面向对象的设计：OOD  Object-oriented Design<br>            * 面向对象的编程：OOP  Object Oriented Programming</p><p>4.* 类和对象的概念</p><p>（1）* 什么是类？<br>            - 类在现实世界当中是不存在的，是一个模板，是一个概念。是人类大脑思考抽象的结果。<br>            - 类代表了一类事物。<br>            - 在现实世界当中，对象A与对象B之间具有共同特征，进行抽象总结出一个模板，这个模板被称为类。</p><p>（2）* 什么是对象？<br>            - 对象是实际存在的个体。现实世界当中实际存在。</p><p>（3）* 描述一下整个软件开发的过程：观察→寻找对象，发现共同特征→归为一类→java代码表述一个类（类的定义）→通过类就可以创建对象→形成一个系统→个体差异，精确到具体个体对象</p><ul><li><p>程序员先观察现实世界，从现实世界当中寻找对象</p><pre><code>    * 寻找了N多个对象之后，发现所有的对象都有共同特征    * 程序员在大脑中形成了一个模板【类】    * Java程序员可以通过java代码来表述一个类    * Java程序中有了类的定义    * 然后通过类就可以创建对象    * 有了对象之后，可以让对象直接协作起来形成一个系统。* 类--【实例化】-&gt;对象* 对象又被称为实例/instance* 对象--【抽象】--&gt;类* 重点：    类描述的是对象的共同特征。    共同特征例如：身高特征    这个身高特征在访问的时候，必须先创建对象，通过对象去访问这个特征。    因为这个特征具体的某个对象上之后，值不同。有的对象身高1.80，有的    对象身高2.80。</code></pre><p>  （4）* 一个类主要描述什么信息呢？</p></li></ul><p>一个类主要描述的是 状态 + 动作。<br>            状态信息：名字、身高、性别、年龄<br>            动作信息：吃、唱歌、跳舞、学习</p><pre><code>        状态--&gt; 一个类的属性        动作--&gt; 一个类的方法*         类{            属性; //描述对象的状态信息            方法; //描述对象的动作信息        }</code></pre><p>注意：<br>                状态和动作当具体到某个对象上之后，发现最终的结果可能不一样。<br>                对象和对象之间有共同特征，但是具体到对象之后有数据的差异。</p><p>（5）    * 类的定义【从这里开始编写代码】<br>        语法结构：<br>            [修饰符列表] class 类名{<br>                属性;<br>                方法;<br>            }</p><pre><code>学生类，描述所有学生对象的共同特征：    学生对象有哪些状态信息：        * 学号【int】        * 名字【String】        * 性别【boolean】        * 年龄【int】【年龄是一个属性，年龄是一个数据，是数据就应该有数据类型】        * 住址【String】        .....    学生对象有哪些动作信息：        * 吃饭        * 睡觉        * 学习        * 玩        * 唱歌        * 跳舞        ....重点：属性通常是采用一个变量的形式来完成定义的。    int no;    int age;    String name;    String address;    boolean sex;</code></pre><hr><pre><code>* java语言中包括两种数据类型：    - 基本数据类型        byte        short        int        long        float        double        boolean        char    - 引用数据类型        String.class SUN提供的        System.class SUN提供的        Student.class 程序员自定义的        User.class 程序员自定义的        Product.class 程序员自定义的        Customer.class 程序员自定义的        ......    - java语言中所有的class都属于引用数据类型。</code></pre><hr><p>在类体中，方法体之外定义的变量被称为“成员变量”，成员变量没有赋值，系统赋默认值：一切向0看齐。</p><ul><li>数据类型              默认值<br>byte,short,int,long     0<br>float,double           0.0<br>boolean               false<br>char                 \u0000<br>引用数据类型          null  空值</li></ul><hr><p>5.对象的创建和使用<br>1、对象又被称为实例，实例变量又被称为对象变量。<br>2、实例化对象的语法：new　类名（）；<br>——new是java语言当中的一个运算符，作用是创建对象，在ＪＶＭ堆内存当中开辟新的内存空间【实例变量存储在堆内存】。<br>——方法区内存：在类加载时，ｃｌａｓｓ字节码代码片段被加载到该内存空间当中<br>堆内存：new的对象在堆内存中存储<br>栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈。<br>eg. Student s= new Student();<br>Student是一个引用数据类型，s是一个局部变量【在栈内存中存储】，new Student（）是一个学生对象。<br>什么是对象？new运算符在堆内存中开辟的内存空间称为对象。<br>什么是引用？引用是一个保存了另一个java对象的内存地址的变量，包括局部变量和成员变量。<br>访问实例变量得语法格式：<br>（1）读取数据/get：引用.变量名<br>（2）修改数据/set：引用.变量名=值<br>局部变量在栈内存中存储<br>成员变量中的实例变量在堆内存的java对象内部存储，实例变量是一个对象一份，100个对象100份.<br> u.addr=new Address();<br>System.out.println(u.name+” city: “+u.addr.city);</p><hr><p>6.变量分类：<br>—局部变量【方法体内声明】—栈内存<br>—成员变量【方法体外申明】<br>*实例变量【前边修饰符没有static】—堆内存<br>*静态变量【前边修饰符中有static】—方法区内存<br>数据→方法区内存→栈内存执行，变化最频繁→堆内存垃圾回收</p><p>—垃圾回收器【自动垃圾回收机制、GC机制】什么时候会考虑将某个java对象的内存回收？<br>*当堆内存当中的java对象成为垃圾数据的时候，会被垃圾回收器回收。<br>—什么时候堆内存的java对象会变成垃圾呢？<br>*没有更多的引用指向它的时候。<br>PS：这个对象无法被访问，因为访问对象只能通过引用的方式访问。</p><hr><p>7.空指针异常：java.lang.NullPointerException<br>空引用访问“实例”相关的数据一定会出现空指针异常。<br>eg.   Customer c=new Customer();<br>      System.out.println(c.id);<br>      c=null;<br>      System.out.println(c.id); //java.lang.NullPointerException<br>“实例”相关的数据表示：这个数据访问的时候必须有对象的参与。这种数据就是实例相关的数据。<br>PS：每一个类中都可以编写主方法，但是一般情况下，一个系统只有一个入口，所以主方法一般写一个。<br>PS：通过赋值运算符“=”，使两个引用变量之间产生链接，从而使其连接到同一地址。</p><hr><p>8.面对对象的封装性<br>myeclipse快捷键：ctrl+shift+F 格式化<br>—封装的好处：<br>（1）真正的“独立体”，对外提供简单的操作入口，封装内部复杂的实现机制，形成真正的“对象”<br>（2）封装意味着以后的程序可以重复使用，并且这个事物应该适应性比较强，在任何场所都可以使用。<br>（3）提高安全性【安全级别高】<br>—封装的步骤<br>（1）所有属性私有化，使用private关键字进行修饰，private表示私有的，修饰的所有数据只能在本类中访问，在外部程序中不能直接访问。 eg.private int age;<br>（2）对外提供简单的操作入口，即外部程序必须通过操作入口进行访问；<br>——对外提供两个公开的方法，分别是set方法（修改）和get方法（读取）<br>①set方法的命名规范：<br>public void setAge(int a){<br>   age=a;<br>}<br>安全过滤：在set方法编写业务逻辑代码进行安全控制<br>②get方法的命名规范：<br>pubilc int getAge(){<br>   return age;<br>}<br>PS:<br>——setter 和getter方法没有static关键字：<br>*有static关键字修饰的方法调用：类名.方法名（实参）;<br>*没有static关键字修饰的方法调用：引用.方法名（实参）。  eg.  c.setId(100)  、  c.getId()</p><p>———————————————————————————-2019.12.19-2019.12.21学习类与对象，“java-面对对象”基础知识学习完毕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础-方法</title>
      <link href="/2019/12/10/5%20java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/10/5%20java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>一、方法（Method）：一段可以完成某个特定的功能，并可被重复的使用的代码片段，相当于c语言中的函数（Function）<br>①方法定义在类体中，在一个类可以定义多个方法，方法编写的位置没有先后顺序，可以随意。<br>②方法体由java语句构成，执行自上而下。<br>③方法怎么定义，语法结构：<br>[修饰符列表] 返回值类型 方法名（形式参数列表）｛<br>方法体；<br>｝<br>语法结构说明：<br>（1）修饰符列表：非必须，目前统一写成：public static<br>（2）修饰符列表当中有“static”的话，如何调用这个方法？<br>     —— 类名.方法名（实际参数列表）;<br>（3）返回值类型：即方法执行后最终返回的结果数据类型，包括基础数据类型和引用数据类型，也有可能不返回任何数据，但返回值类型位置必须编写：void关键字<br>（4）<br>——返回值类型不是void，必须有“return 值；”，返回值类型是void，可以写”return ;”也可以不写return语句。——满足数量相同，类型对应相同。<br>——返回值类型不是void的时候，一个方法有返回值（“return 值”）时，调用此方法时，这个返回值可以接收也可以不接收，可采用变量接收返回值，也可直接输出。<br>——eg.int i=divide(a,b);    System.out.println(i);<br>或  System.out.println(divide(a,b));。<br>——返回值类型是void，可以写”return ;”也可以不写return语句，但不会返回数据，作用是终止方法执行，不干扰外层循环。<br>——return语句后面的代码不执行<br>（5）方法名：合法标识符，见名知意，首字母小写，后面每个单词首字母大写。<br>（6）形式参数列表：简称形参，局部变量，多个形参用“,”隔开，区别传递的真实数据（实际参数，即实参）——满足数量相同，类型对应相同。ps：注意自动类型转化、强制类型转化<br>④方法调用：《方法的修饰列表当中有static》<br>语法规则：类名.方法名（实参列表）；<br>修饰符列表有static关键字的：  调用本类的方法——类名可省略——方法名（实参列表）； ；调用其他类的方法——必须有类名（若省略类名，默认从当前类中寻找）——类名.方法名（实参列表）；。<br>public static ??? 方法名（？？？）｛<br>？？？<br>return 值；<br>｝<br>public static void main（String[] args）｛<br>类名.方法名（实际参数列表）<br>｝</p><p>⑤ 方法执行过程中的内存分配<br>    * 方法的重载机制<br>    * 方法的自上而下执行、递归调用：只有在主方法中调用的方法才能执行，未调用不执行输出。<br>1、方法只定义，不调用，不分配内存空间<br>2、在JVM内存划分上有三块主要的内存空间（此外还有其他内存空间）：方法区内存、堆内存、栈内存<br>3、关于栈数据结构：栈帧→栈（栈顶元素、栈底元素）；压栈/入栈/push→栈→弹栈/出栈/pop   ps：类似柱形堆积的模块<br>——栈：stack，是一种数据结构<br>***栈内存：<br>主要存储局部变量，不同方法体中的局部变量只是”值的传递”，超出本方法体区域无任何意义，即不同方法体中可以使用同一变量名，而不干扰。<br>——数据结构反映的是数据的存储形态。<br>——必修：数据结构+算法<br>——常见的数据结构：数组、队列、栈、链表、二叉树、哈希表/散列表…….<br>4、方法执行时代码片段在哪里？方法执行过程的内存在哪里分配？<br>——方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的时候，将其放在了方法区。所以JVM中的三块主要内存空间中方法区内存最先有数据，存放了代码片段。<br>——该代码片段位于方法区，可重复调用，调用时分配内存，代码片段与数据加载在方法区内存、运行在栈内存中分配<br>——局部变量在“方法体”中声明，在运行阶段内存在栈内分配。<br>——压栈/入栈/push：给方法分配内存<br>——弹栈/出栈/pop：释放该方法的内存空间</p><p>重点：方法调用时，在参数传递过程中实际是变量的“值”的传递。<br>Ps: 代码中红色标识符为sun公司提供的方法：存放在jdk→jre→lib→类库：rt.jar压缩包中(.class字节码文件），eg.System \String</p><p>⑥方法重载/overload：同一个类，功能相似，方法名相同，以参数差别区分。<br>——1.什么时候考虑使用方法重载？<br>*功能相似时，尽可能让方法名相同。<br>——2.什么条件满足方法重载？<br>*同一个类，功能相似，方法名相同，以参数差别（数量、顺序、类型）区分。<br>——3.方法重载和什么有关系？和什么没有关系？<br>*方法重载和方法名、参数列表有关<br>*方法重载和返回值类型、修饰符列表无关<br>——4.方法重载的具体应用<br>*制作方法原码，并生成.class文件，之后可引用，类似sun公司制作的System 、 String。</p><p>⑦方法的递归调用<br>1.方法的递归调用：方法自身调用自身<br>2.方法递归很耗费栈内存，递归算法不用的时候尽量别用<br>3.<br>递归必须有结束条件，没有结束条件一定会发生栈内存溢出错误。<br>——栈内存溢出错误：java.lang.StackOverflowError<br>错误发生无法挽回，最终导致JVM停止工作。<br>——递归即使有了结束条件，即使结束条件是正确的，也可能发生栈内存溢出错误，因为递归的太深了。<br>4.有些情况下该功能得实现必须依靠递归。<br>eg.1~N的累加或累积<br>public static int sum(int n){<br>   if(n==1){<br>     return 1;<br>     }<br>   return n+sum(n-1);<br>}<br>————————————————————–2019.12.10-2019.12.18学习“方法”中,“方法“学习完毕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>控制语句2-循环结构</title>
      <link href="/2019/12/06/4%20%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A52-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2019/12/06/4%20%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A52-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>二、 循环结构<br>        - for<br>        - while<br>        - do..while()<br>1.for循环的语法结构：<br>        for(初始化表达式;布尔表达式;更新表达式){<br>           java语句；<br>}</p><p>for循环的执行原理/执行过程：<br>①初始化表达式、布尔表达式、更新表达式：都不是必须的；<br>②过程：初始化表达式→布尔表达式→循环体→更新表达式→布尔表达式→循环体体→更新表达式→…….→布尔表达式=false<br>③for和if的嵌套<br>（1）内层循环和外层循环的变量名不能重复<br>（2）外层循环的终止要求未满足时，多次重复内层循环，直至满足外层循环的终止条件。<br>（3）嵌套循环的执行过程：外层循环→内层循化→内层循环终止→外层循环→内层循化→内层循环终止→…….→外层循环终止<br>eg.计算1~100所有奇数的和（累加求和：+=）、九九乘法表的编译</p><p>（2）while语句：布尔表达式为true即执行，注意死循环<br>while循环的语法结构：<br>while（布尔表达式）｛<br>循环体；<br>｝<br>（3）do…while循环：区别while循环，先执行后判断<br>1、do…while循环的语法结构：<br>do｛<br>循环体；<br>｝while（布尔表达式）；<br>2、do…while循环的执行原理：区别while循环，先执行后判断</p><hr><p>三、控制循环的语句<br>（1）break语句<br>①break为关键字，翻译为“中断/折断”<br>②break;是一个完整的java语句<br>③作用：终止switch语句的执行，终止循环语句的执行，终止最近的语句，或者指定终止某循环，需要给循环起名（eg.for1: for循环），采用这种语法：break 循环名;（eg. break for1;)<br>（2）continue语句<br>①continue表示：继续/go on/下一个<br>②continue;是一个完整的java语句<br>③区别break：continue表示直接进入下一个循环继续执行，终止当前此次循环<br>④指定终止某次循环，需要给循环起名（eg.for1: for循环），采用这种语法：continue 循环名;（eg. continue for1;)</p><hr><p>PS：编程运行问题\bug记录：<br>1.进行语法分析时已到达文件结尾（原因：分析已达到文件结尾一般是括号没有闭合，或者缺少了分号        解决方案：手工查看括号闭合情况）<br>2.找不到符号（未定义初始化变量）<br>3.程序在编译阶段不运行，即不直接判断表达式的结果，只分析语法。</p><p>———————————————————————2019.12.06~2019.12.07学习for语句中<br>—————————————————————————–2019.12.08 for语句学习完毕<br>————————————————————————————2019.12.09控制语句学习完毕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-控制语句1</title>
      <link href="/2019/11/30/3%20java-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A51/"/>
      <url>/2019/11/30/3%20java-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A51/</url>
      
        <content type="html"><![CDATA[<p>控制语句：可嵌套使用，代码格式要保证完美（该缩进的时候必须缩进，大部分情况下使用大括号包围的需要缩进）</p><pre><code>* 选择结构    - if,if..else    - switch* 循环结构    - for    - while    - do..while()* 控制循环的语句    - break    - continue</code></pre><p>（1）if语句的语法结构：四种编写方式<br>第一种： if（布尔表达式）｛<br>                 java语句;<br>                 java语句;<br>                 java语句;<br>                 …<br>｝<br>第二种： if（布尔表达式）｛<br>                 java语句;<br>                 java语句;<br>                 java语句;<br>                 …<br>｝else｛<br>                 java语句;<br>                 java语句;<br>                 …<br>｝<br>第三种：if+else if（布尔表达式） <em>n<br>第四种：if+else if （布尔表达式）</em>n+else</p><p>PS:面向对象：接收用户键盘输入，即“键盘”→“内存”<br>     java.util.Scanner s=new java.util.Scanner(System.in);接收用户键盘输入，即“键盘”→“内存”<br>     String str=s.next(); 或 int num=s.nextInt(); 等待用户输入，输入之后自动接收，附值给str 或num变量<br>     System.out.println(); 负责向控制台输出【内存→控制台】<br>PS：else前必须有if。</p><hr><p>（2）switch语句的语法结构：<br>switch(int或String类型的字面值或变量)｛<br>   case int或String类型的字面值或变量：<br>          java语句；<br>          …<br>          break;<br>   case int或String类型的字面值或变量：<br>          java语句；<br>          …<br>          break;<br>   case int或String类型的字面值或变量：<br>          java语句；<br>          …<br>          break;<br>…<br>default:<br>       java语句；<br>       …<br>｝<br>PS：switch 、 case 后面只能是int（自动类型转换：byte\short\char→int）或String类型的字面值或变量，不能是探测其他类型。</p><p>switch语句执行原理：<br>①switch(int或String类型的字面值或变量)  与  case int或String类型的字面值或变量   进行匹配，自上而下的顺序匹配，匹配成功的分支执行<br>②遇到“break”，整个switch语句终止<br>③case穿透现象： 匹配成功的分支执行，若没有”break”语句，直接进入下一分支执行（不进行匹配）。<br>⑥所有分支都没有匹配成功，当有default的语句，会执行default分支当中的程序。<br>⑦case可以合并：只要符合其中一个case，分支均会执行<br>int i=1；<br>switch（i）｛<br>   case 1: case 2: case 3: …<br>       system.out.println(“Test Code!”);<br>}<br>eg.简单计算机系统,int（自动类型转换：byte\short\char→int）的应用</p><p>———————————————-2019.11.30<br>————————————————2019.12.01<br>————————————————-2019.12.02 多练习，if语句复习完毕<br>—————————————————–2019.12.03 switch语句学习<br>——————————————————-2019.12.04 switch语句练习简单计算机系统<br>——————————————————–2019.12.05 switch语句复习完毕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识2</title>
      <link href="/2019/11/27/2%20java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/"/>
      <url>/2019/11/27/2%20java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/</url>
      
        <content type="html"><![CDATA[<p>第二章 java语言基础<br>java 的SE类库：字节码：rt.jar  原码：src.zip  eg.String.class   String.java<br>字符编码（文字←→二进制，eg.unicode编码、UTF-8……）、字节编码（相当于词典）</p><hr><p>一、* 标识符: 可以自主命名的单词，eg.类名、方法名、变量名、接口名、常量名<br>1.命名规则：<br>（1）“数字、字母、下划线_、美元符号$”组成，不能含有其他符号<br>（2）不能数字开头<br>（3）严格区分大小写<br>（4）关键字不能作为标识符<br>（5）理论上无长度限制<br>2.遵循驼峰命名方式 ：每个单词首字母大写<br>3.PS: 类名、接口名：每个单词首字母大写<br>变量名、方法名：首字母小写，后面每个单词首字母大写<br>常量名：全部大写</p><p>二、* 关键字：<br>关键字一律用小写字母标识，按其用途划分为如下几组。</p><p>(1)用于数据类型。<br>　　用于数据类型的关键字有 boolean、byte、char、 double、 false、float、int、long、new、short、true、void、instanceof。</p><p>(2)用于语句。<br>　　用于语句的关键字有break、case、 catch、 continue、 default 、do、 else、 for、 if、return、switch、try、 while、 finally、 throw、this、 super。</p><p>(3)用于修饰<br>　　用于修饰的关键字有 abstract、final、native、private、 protected、public、static、synchronized、transient、 volatile。</p><p>(4)用于方法、类、接口、包和异常。<br>　　用于方法、类、接口、包和异常的关键字有 class、 extends、 implements、interface、 package、import、throws。<br>　　还有些关键字,如cat、 future、 generic、innerr、 operator、 outer、rest、var等都是Java保留的没有意义的关键字。<br>　　另外，Java还有3个保留字:true、false、null。它们不是关键字，而是文字。包含Java定义的值。和关键字一样,它们也不可以作为标识符使用</p><hr><p>三、* 字面值=数据:<br> 十进制：缺省默认的方式  八进制：0开始   十六进制：0x开始</p><p>四、* 变量</p><p>五、* 数据类型（8种）：byte（-128 ~ 127）、short（-32768 ~ 32767）、int、long&lt;float&lt;double，boolean（true、false）、char（0~65535）</p><p>计算：<br>类型转换：<br>(1)自动类型转换：<br>默认byte、short、char→int  ； float&lt;double   eg. float t=(float)3.0  or  float t=3.0f<br>①小容量→大容量 long x=123；<br>②byte、short、char→int&lt;long&lt;float&lt;double→java.math.BigDecimal（精度更高、引用数据类型）<br>(2)强制类型转换：编译问题（数据类型、byte\short\char取值范围）、精度损失（原码、反码、补码）<br>long: 0L         float: f/F<br>byte a=（byte）123 ， byte a=123<br>long b=123432L</p><hr><p>3、运算符：无小括号的情况下，自左向右的顺序依次运算<br>（1）* 算术运算符:  +  -  *  /  %（求余）  ++   –<br>（2）* 关系运算符（结果输出：boolean（true、false））：<br>                                            &gt;  &gt;=  &lt;  ==  !==<br>（3）* 逻辑运算符（两边必须为boolean型，其结果也为boolean型）：<br>&amp;（与）  ｜（或）  ！（非：单目运算符）  ^ （异或: 只要两边的算子不一样，就是true）<br>&amp;&amp;（短路与，false即发生短路）  ||（短路或，true即发生短路）</p><p>（4）* 扩展的赋值类运算符(不改变运算结果数据类型：强制类型转换——超范围，注意精度损失）：  +=  -=  *=  /=  %=<br>区别：<br> b+=5：等同于 b=(byte)(b+5)， 区别b=b+5(编译错误，编译器发现b+5为int类型）;   可用于“累加、累减…….”</p><p>（5）* 字符串连接运算符（两边数据只要有一个数据是字符串，即进行字符串连接运算）： +<br>eg .  System.out.println(20+30+”30”);//5030<br>string是引用数据类型，区别基本数据类型（int、char…….）  eg. string s=”abc”</p><p>（6）* 三目运算符/三元运算符/条件运算符：<br>1）注意要组成一句完整的java语句<br>2）类型兼容<br>string是引用数据类型，区别基本数据类型（int、char…….）  eg. string s=”abc”</p><p>语法规则：布尔表达式？表达式1：表达2         ture→表达式1  false→表达2<br>    boolean sex=false;<br>        char x=(sex?’H’:’y’);<br>    String y=(sex?”man”:”woman”);<br>        System.out.println(y);<br>    System.out.println(sex?”man”:”woman”);<br>    System.out.println(x+y);</p><p>—————————————————-2019.11.27未复习完全，明天继续复习<br>———————————————————2019.11.28复习运算符<br>————————————————————2019.11.29运算符复习完毕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识1</title>
      <link href="/2019/11/26/1%20java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/"/>
      <url>/2019/11/26/1%20java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</url>
      
        <content type="html"><![CDATA[<p>一、前提<br>1.windows操作系统默认情况下是不显示文件扩展名的，将文件的扩展名显示出来：<br>    * 计算机 –&gt; 组织 –&gt; 文件夹和搜索选项 –&gt; 查看 –&gt; 隐藏已知文件类型的扩展名【对勾去掉】<br>2.打开DOS命令窗口：<br>        - 快捷键：win + r，打开运行窗口<br>        - 输入cmd回车<br>退出DOS命令窗口：<br>        输入exit–&gt;回车</p><ul><li>DOS窗口当中也可以设置字体和屏幕以及文字的颜色。</li></ul><p>二、DOS界面常用命令：<br>（1）清屏：cls<br>（2）强行终止DOS命令窗口中正在运行的程序：ctrl + c eg.终止本地静态博客的运行<br>（3）创建目录：mkdir abc【表示在当前所在目录下新建一个目录，起名abc】</p><p>（4）目录切换命令：cd 路径</p><ul><li>自动补全：cd e 【然后按tab键，当前所在的目录下所有以e开始的目录自动补全路径，当这个自动补全的路径不是自己想要的路径，可以继续使用tab键】</li><li>回到上级目录：cd .. 【..是一个路径，代表当前路径的上级路径】<pre><code>cd ../../../</code></pre></li><li>当前目录：cd.</li><li>直接回到根路径：cd \</li></ul><p>（5）查看当前目录下所有的子文件和子目录：dir</p><p>（6）怎么切换盘符：即切换计算机中的C、D、E、F盘<br>        c: 回车<br>        d: 回车<br>        e: 回车<br>        f: 回车</p><p>三、关于windows操作系统当中常用的快捷键：<br>        * win + r    打开运行窗口<br>    * win + d    显示桌面<br>    * win + e    打开资源管理器=打开计算机<br>    * win + L    锁屏<br>    * * alt + tab    应用之间的切换<br>四、文本编辑快捷键：<br>        * ctrl + a    全选<br>    * ctrl + c    复制<br>    * ctrl + v    粘贴<br>    * ctrl + s    保存<br>    * ctrl + x      剪切<br>    * ctrl + z    撤销<br>    * ctrl + y      重做<br>    * tab            缩进/多行缩进<br>    * shift + tab    取消缩进<br>    * HOME          回到行首<br>    * END            回到行尾<br>    * ctrl + end    回到文件末尾<br>    * ctrl + home    回到文件头<br>    * shift + home    选中光标前半行<br>    * shift + end    选中光标后半行<br>    * ctrl + shift + 向右或者向左的箭头  选中前或后字符、单词<br>    * 鼠标双击：选中一个单词<br>    * 鼠标三击：选中一行</p><p>五、关键术语：<br>1）* JDK【Java开发工具箱】<br>    * JRE【Java的运行时环境】<br>               * JVM【Java虚拟机】<br>三者之间的关系：JDK 中包含JRE，JRE中包含JVM</p><p>2）Java的加载与执行：java.exe：负责运行     javac.exe：负责编译<br>   （1）* 程序员在xxx.java文件中编写源代码，源代码必须符合java的语法，这些源代码就是高级语言。<br>    存放源代码的文件被称为源文件。<br>   （2）编译生成的程序被称为：字节码程序。编译生成的文件是：xxx.class文件<br>   （3）编译和运行可以在不同的操作系统中完成。<br>eg.源文件创建=新建名为xxx.java文本——&gt; 在当前目录javac.exe命令编译：javac 源文件路径 ——&gt; xxx.class（可移植到其他平台运行）——&gt;运行：java 类名<br>PS：源文件创建=新建名为xxx.java文本——&gt;java 类名.java ：可直接运行<br>以上程序的执行原理：输入：java A → 启动JVM——&gt;启动“类加载器-Class Loader”——&gt;搜索“类名.class”字节码文件——&gt;将.class文件转换成”二进制”，操作系统可以直接识别二进制，操作系统执行二进制码和底层的硬件平台进行交互。</p><p>3）环境变量path：windows操作系统在查找某个命令的时候是怎么查找的？<br>    * 首先会从当前目录下找这个命令<br>            * 当前目录下不存在这个命令的话，会去环境变量path指定的路径当中查找该命令。<br>            * 还是找不到则出现错误提示信息。’javac’ 不是内部或外部命令，也不是可运行的程序</p><pre><code>       - path环境变量隶属于windows操作系统，和java无关，这个环境变量主要用来指定命令的搜索路径。* 环境变量怎么配置？       计算机 --&gt; 点击右键 --&gt; 属性 --&gt; 高级系统设置 --&gt; 环境变量* 环境变量配置包括用户级别和系统级别   任何一个环境变量都有变量名和变量值，例如path环境变量：       变量名是:path       值：路径【多个路径之间必须采用分号隔开，而且要求分号必须是半角分号】       path=C:\Program Files (x86)\Java\jdk1.7.0_75\bin;otherpath;otherpath.....</code></pre><p>PS：javac要想能随意使用，需要将javac所在目录配置到环境变量path当中。</p><p>六、应用：<br>1.ClassLoader是在哪个位置上搜索HelloWorld.class字节码文件的？    </p><ul><li>默认情况下，ClassLoader从当前路径下加载xxx.class字节码文件<pre><code>* 当然，也可以让ClassLoader去某个指定的路径下加载字节码文件，这时需要配置环境变量classpath* classpath环境变量属于java语言中的环境变量，不属于windows操作系统【PATH环境变量属于操作系统】* classpath是给ClassLoader类加载器指路的。* 设置这样的环境变量：classpath=D:\course\JavaProjects\02-JavaSE\day02    - 打开dos命令窗口在任意位置，都可以执行：java HelloWorld* classpath环境变量没有配置的话，类加载器默认从当前路径下找字节码文件，当classpath环境变量配置为某个指定的路径之后，类加载器只去指定的路径当中加载字节码文件。* 综上所述，环境变量classpath不再配置，这样类加载器会自动从当前路径下加载class字节码文件。①所以，每一次执行.class程序的时候，需要在DOS命令窗口中先切换到.class字节码文件所在的路径下，然后运行。②* 当然，classpath也可以这样配置：classpath=.</code></pre></li></ul><p>七、需要记忆：<br>        * public表示公开的<br>        * class表示定义一个类<br>        * static表示静态的<br>        * void表示空<br>                *main表示方法名是main<br>        * System.out.println(“”); 向控制台输出消息<br>        * 类体<br>        * 方法体<br>        * 类体中不能直接编写java语句【除声明变量之外】<br>        * 一个java语句必须以“;”结束<br>        * 方法体中可以编写多条java语句<br>        * 主方法是程序的入口，固定写法，SUN规定的。</p><p>八、public class 和 class 的区别：你的独一无二，我的肆意生长。<br>*一个java源文件中public class不是必须存在的，若存在public class其类名与源文件名保持一致。<br>*程序的顺利运行前提：<br>                   定义主方法：public static void main(String[] args)<br>———————————————————————————2019.11.26：java复习</p>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>静态blog-hexo搭建学习</title>
      <link href="/2019/11/25/blog%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/25/blog%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>1.安装Node.js：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>2.W7：点击屏幕左下开始，输入cmd，打开DOS界面</p><p>3.查看node.js版本，v=version：<br>于DOS界面输入命令：node -v      </p><p>4.安装Hexo框架<br>输入安装命令：<br>$ npm install -g hexo-cli<br>耐心等待安装结束，查看版本：hexo -v</p><p>5.安装cnpm：<br>$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>查看cnpm版本：cnpm -v</p><h2 id="6-安装git"><a href="#6-安装git" class="headerlink" title="6.安装git"></a>6.安装git</h2><p>本地使用<br>1.hexo init<br>2.hexo new “BlogName”<br>3.hexo generate<br>4.hexo s   (s=server  ,  <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>)   </p><p>服务器部署<br>1.在github创建新仓库：YourGithubName.github.io<br>2.在Hexo目录下打开git bash here，并输入以下安装Hexo的git部署插件命令：<br>$ npm install hexo-deployer-git –save<br>3.在Hexo目录下打开_config.yaml文件，做如下修改：</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/yuttts/yuttts.github.io.git" target="_blank" rel="noopener">https://github.com/yuttts/yuttts.github.io.git</a><br>  branch: master<br>  4.部署，输入命令：<br>$ hexo d<br> 5.部署成功后，输入YourGithubName.github.io，即可访问。</p><p>———————————————–2019.11.25更新</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
